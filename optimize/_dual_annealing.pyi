"""
This type stub file was generated by pyright.
"""

"""
A Dual Annealing global optimiz"""
__all__ = ['dual_annealing']
class VisitingDistribution:
    """
    Class used to generate new """
    TAIL_LIMIT = ...
    MIN_VISIT_BOUND = ...
    def __init__(self, lb, ub, visiting_param, rand_gen) -> None:
        ...
    
    def visiting(self, x, step, temperature):
        """ Based on the step in the strate"""
        ...
    
    def visit_fn(self, temperature, dim):
        """ Formula Visita from p. 405 of r"""
        ...
    


class EnergyState:
    """
    Class used to record the en"""
    MAX_REINIT_COUNT = ...
    def __init__(self, lower, upper, callback=...) -> None:
        ...
    
    def reset(self, func_wrapper, rand_gen, x0=...): # -> None:
        """
        Initialize current loca"""
        ...
    
    def update_best(self, e, x, context): # -> Literal['Callback function requested to stop early by retur…'] | None:
        ...
    
    def update_current(self, e, x): # -> None:
        ...
    


class StrategyChain:
    """
    Class that implements withi"""
    def __init__(self, acceptance_param, visit_dist, func_wrapper, minimizer_wrapper, rand_gen, energy_state) -> None:
        ...
    
    def accept_reject(self, j, e, x_visit): # -> None:
        ...
    
    def run(self, step, temperature): # -> Literal['Maximum number of function call reached during ann…'] | None:
        ...
    
    def local_search(self): # -> Literal['Maximum number of function call reached during loc…', 'Maximum number of function call reached during dua…'] | None:
        ...
    


class ObjectiveFunWrapper:
    def __init__(self, func, maxfun=..., *args) -> None:
        ...
    
    def fun(self, x):
        ...
    


class LocalSearchWrapper:
    """
    Class used to wrap around t"""
    LS_MAXITER_RATIO = ...
    LS_MAXITER_MIN = ...
    LS_MAXITER_MAX = ...
    def __init__(self, search_bounds, func_wrapper, **kwargs) -> None:
        ...
    
    def local_search(self, x, e):
        ...
    


def dual_annealing(func, bounds, args=..., maxiter=..., local_search_options=..., initial_temp=..., restart_temp_ratio=..., visit=..., accept=..., maxfun=..., seed=..., no_local_search=..., callback=..., x0=...):
    """
    Find the global minimum of """
    ...


"""
This type stub file was generated by pyright.
"""

import numpy as np

_iter = ...
_xtol = ...
_rtol = 4 * np.finfo(float).eps
__all__ = ['newton', 'bisect', 'ridder', 'brentq', 'brenth', 'toms748', 'RootResults']
_ECONVERGED = ...
_ESIGNERR = ...
_ECONVERR = ...
_EVALUEERR = ...
_EINPROGRESS = ...
CONVERGED = ...
SIGNERR = ...
CONVERR = ...
VALUEERR = ...
INPROGRESS = ...
flag_map = ...
class RootResults:
    """Represents the root finding resu"""
    def __init__(self, root, iterations, function_calls, flag) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def results_c(full_output, r): # -> tuple[Unknown, RootResults]:
    ...

def newton(func, x0, fprime=..., args=..., tol=..., maxiter=..., fprime2=..., x1=..., rtol=..., full_output=..., disp=...):
    """
    Find a zero of a real or co"""
    ...

def bisect(f, a, b, args=..., xtol=..., rtol=..., maxiter=..., full_output=..., disp=...): # -> tuple[Unknown, RootResults]:
    """
    Find root of a function wit"""
    ...

def ridder(f, a, b, args=..., xtol=..., rtol=..., maxiter=..., full_output=..., disp=...): # -> tuple[Unknown, RootResults]:
    """
    Find a root of a function i"""
    ...

def brentq(f, a, b, args=..., xtol=..., rtol=..., maxiter=..., full_output=..., disp=...): # -> tuple[Unknown, RootResults]:
    """
    Find a root of a function i"""
    ...

def brenth(f, a, b, args=..., xtol=..., rtol=..., maxiter=..., full_output=..., disp=...): # -> tuple[Unknown, RootResults]:
    """Find a root of a function in a b"""
    ...

class TOMS748Solver:
    """Solve f(x, *args) == 0 using Alg"""
    _MU = ...
    _K_MIN = ...
    _K_MAX = ...
    def __init__(self) -> None:
        ...
    
    def configure(self, xtol, rtol, maxiter, disp, k): # -> None:
        ...
    
    def get_result(self, x, flag=...): # -> tuple[Unknown, int, int, int]:
        r"""Package the result and statistic"""
        ...
    
    def start(self, f, a, b, args=...): # -> tuple[Literal[0], Unknown] | tuple[Literal[1], float]:
        r"""Prepare for the iterations."""
        ...
    
    def get_status(self): # -> tuple[Literal[0], float] | tuple[Literal[-2], float] | tuple[Literal[1], float]:
        """Determine the current status."""
        ...
    
    def iterate(self): # -> tuple[Literal[0], Any | float | Unknown] | tuple[Literal[0], float] | tuple[Literal[0, -2, 1], float]:
        """Perform one step in the algorith"""
        ...
    
    def solve(self, f, a, b, args=..., xtol=..., rtol=..., k=..., maxiter=..., disp=...): # -> tuple[Unknown | float, int, int, Literal[0]] | tuple[float, int, int, Literal[0]] | tuple[Any | float | Unknown, int, int, Literal[0]] | tuple[Any | float | Unknown, int, int, Literal[-2]]:
        r"""Solve f(x) = 0 given an interval"""
        ...
    


def toms748(f, a, b, args=..., k=..., xtol=..., rtol=..., maxiter=..., full_output=..., disp=...): # -> tuple[Unknown | float | Any, RootResults] | float | Any:
    """
    Find a zero using TOMS Algo"""
    ...


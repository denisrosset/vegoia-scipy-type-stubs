"""
This type stub file was generated by pyright.
"""

"""
basinhopping: The basinhopping """
__all__ = ['basinhopping']
class Storage:
    """
    Class used to store the low"""
    def __init__(self, minres) -> None:
        ...
    
    def update(self, minres): # -> bool:
        ...
    
    def get_lowest(self):
        ...
    


class BasinHoppingRunner:
    """This class implements the core o"""
    def __init__(self, x0, minimizer, step_taking, accept_tests, disp=...) -> None:
        ...
    
    def one_cycle(self): # -> bool:
        """Do one cycle of the basinhopping"""
        ...
    
    def print_report(self, energy_trial, accept): # -> None:
        """print a status update"""
        ...
    


class AdaptiveStepsize:
    """
    Class to implement adaptive"""
    def __init__(self, takestep, accept_rate=..., interval=..., factor=..., verbose=...) -> None:
        ...
    
    def __call__(self, x):
        ...
    
    def take_step(self, x):
        ...
    
    def report(self, accept, **kwargs): # -> None:
        "called by basinhopping to report"
        ...
    


class RandomDisplacement:
    """Add a random displacement of max"""
    def __init__(self, stepsize=..., random_gen=...) -> None:
        ...
    
    def __call__(self, x):
        ...
    


class MinimizerWrapper:
    """
    wrap a minimizer function a"""
    def __init__(self, minimizer, func=..., **kwargs) -> None:
        ...
    
    def __call__(self, x0):
        ...
    


class Metropolis:
    """Metropolis acceptance criterion."""
    def __init__(self, T, random_gen=...) -> None:
        ...
    
    def accept_reject(self, energy_new, energy_old): # -> bool:
        """
        If new energy is lower """
        ...
    
    def __call__(self, **kwargs): # -> bool:
        """
        f_new and f_old are man"""
        ...
    


def basinhopping(func, x0, niter=..., T=..., stepsize=..., minimizer_kwargs=..., take_step=..., accept_test=..., callback=..., interval=..., disp=..., niter_success=..., seed=...):
    """Find the global minimum of a fun"""
    ...

if __name__ == "__main__":
    kwargs = ...
    x0 = ...
    ret = ...
    kwargs = ...
    x0 = ...
    ret = ...

"""
This type stub file was generated by pyright.
"""

import numpy as np

"""
differential_evolution: The dif"""
__all__ = ['differential_evolution']
_MACHEPS = np.finfo(np.float64).eps
def differential_evolution(func, bounds, args=..., strategy=..., maxiter=..., popsize=..., tol=..., mutation=..., recombination=..., seed=..., callback=..., disp=..., polish=..., init=..., atol=..., updating=..., workers=..., constraints=..., x0=...): # -> OptimizeResult:
    """Finds the global minimum of a mu"""
    ...

class DifferentialEvolutionSolver:
    """This class implements the differ"""
    _binomial = ...
    _exponential = ...
    __init_error_msg = ...
    def __init__(self, func, bounds, args=..., strategy=..., maxiter=..., popsize=..., tol=..., mutation=..., recombination=..., seed=..., maxfun=..., callback=..., disp=..., polish=..., init=..., atol=..., updating=..., workers=..., constraints=..., x0=...) -> None:
        ...
    
    def init_population_lhs(self): # -> None:
        """
        Initializes the populat"""
        ...
    
    def init_population_qmc(self, qmc_engine): # -> None:
        """Initializes the population with """
        ...
    
    def init_population_random(self): # -> None:
        """
        Initializes the populat"""
        ...
    
    def init_population_array(self, init): # -> None:
        """
        Initializes the populat"""
        ...
    
    @property
    def x(self): # -> Any:
        """
        The best solution from """
        ...
    
    @property
    def convergence(self): # -> float | Any:
        """
        The standard deviation """
        ...
    
    def converged(self): # -> Any | Literal[False]:
        """
        Return True if the solv"""
        ...
    
    def solve(self): # -> OptimizeResult:
        """
        Runs the DifferentialEv"""
        ...
    
    def __iter__(self): # -> Self@DifferentialEvolutionSolver:
        ...
    
    def __enter__(self): # -> Self@DifferentialEvolutionSolver:
        ...
    
    def __exit__(self, *args): # -> None:
        ...
    
    def __next__(self): # -> tuple[Unknown | Any, Any | Unknown]:
        """
        Evolve the population b"""
        ...
    


class _FunctionWrapper:
    """
    Object to wrap user cost fu"""
    def __init__(self, f, args) -> None:
        ...
    
    def __call__(self, x):
        ...
    


class _ConstraintWrapper:
    """Object to wrap/evaluate user def"""
    def __init__(self, constraint, x0) -> None:
        ...
    
    def __call__(self, x): # -> ndarray[Unknown, Unknown]:
        ...
    
    def violation(self, x): # -> Any:
        """How much the constraint is excee"""
        ...
    



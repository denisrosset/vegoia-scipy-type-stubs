"""
This type stub file was generated by pyright.
"""

"""Generic interface for least-squa"""
TERMINATION_MESSAGES = ...
FROM_MINPACK_TO_COMMON = ...
def call_minpack(fun, x0, jac, ftol, xtol, gtol, max_nfev, x_scale, diff_step): # -> OptimizeResult:
    ...

def prepare_bounds(bounds, n): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown]]:
    ...

def check_tolerance(ftol, xtol, gtol, method): # -> tuple[Unknown | Literal[0], Unknown | Literal[0], Unknown | Literal[0]]:
    ...

def check_x_scale(x_scale, x0):
    ...

def check_jac_sparsity(jac_sparsity, m, n): # -> tuple[ndarray[Unknown, Unknown] | Unknown, Unknown] | None:
    ...

def huber(z, rho, cost_only): # -> None:
    ...

def soft_l1(z, rho, cost_only): # -> None:
    ...

def cauchy(z, rho, cost_only): # -> None:
    ...

def arctan(z, rho, cost_only): # -> None:
    ...

IMPLEMENTED_LOSSES = ...
def construct_loss_function(m, loss, f_scale): # -> ((f: Unknown, cost_only: bool = False) -> (Unknown | ndarray[Unknown, Unknown])) | None:
    ...

def least_squares(fun, x0, jac=..., bounds=..., method=..., ftol=..., xtol=..., gtol=..., x_scale=..., loss=..., f_scale=..., diff_step=..., tr_solver=..., tr_options=..., jac_sparsity=..., max_nfev=..., verbose=..., args=..., kwargs=...):
    """Solve a nonlinear least-squares """
    ...


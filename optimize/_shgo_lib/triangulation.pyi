"""
This type stub file was generated by pyright.
"""

class Complex:
    def __init__(self, dim, func, func_args=..., symmetry=..., bounds=..., g_cons=..., g_args=...) -> None:
        ...
    
    def __call__(self): # -> list[Unknown]:
        ...
    
    def n_cube(self, dim, symmetry=..., printout=...): # -> None:
        """
        Generate the simplicial"""
        ...
    
    def perm(self, i_parents, x_parents, xi): # -> None:
        ...
    
    def perm_symmetry(self, i_s, x_parents, xi): # -> None:
        ...
    
    def add_centroid(self): # -> None:
        """Split the central edge between t"""
        ...
    
    def incidence(self): # -> None:
        ...
    
    def graph_map(self): # -> None:
        """ Make a list of size 2**n + 1 wh"""
        ...
    
    def sub_generate_cell(self, C_i, gen): # -> list[Unknown]:
        """Subgenerate a cell `C_i` of gene"""
        ...
    
    def split_generation(self): # -> bool:
        """
        Run sub_generate_cell f"""
        ...
    
    def construct_hypercube(self, origin, supremum, gen, hgr, printout=...): # -> Cell:
        """
        Build a hypercube with """
        ...
    
    def split_simplex_symmetry(self, S, gen): # -> None:
        """
        Split a hypersimplex S """
        ...
    
    def plot_complex(self): # -> None:
        """
             Here, C is the LIS"""
        ...
    


class VertexGroup:
    def __init__(self, p_gen, p_hgr) -> None:
        ...
    
    def __call__(self): # -> list[Unknown]:
        ...
    
    def add_vertex(self, V): # -> None:
        ...
    
    def homology_group_rank(self): # -> int:
        """
        Returns the homology gr"""
        ...
    
    def homology_group_differential(self): # -> int:
        """
        Returns the difference """
        ...
    
    def polytopial_sperner_lemma(self): # -> None:
        """
        Returns the number of s"""
        ...
    
    def print_out(self): # -> None:
        """
        Print the current cell """
        ...
    


class Cell(VertexGroup):
    """
    Contains a cell that is sym"""
    def __init__(self, p_gen, p_hgr, origin, supremum) -> None:
        ...
    


class Simplex(VertexGroup):
    """
    Contains a simplex that is """
    def __init__(self, p_gen, p_hgr, generation_cycle, dim) -> None:
        ...
    


class Vertex:
    def __init__(self, x, bounds=..., func=..., func_args=..., g_cons=..., g_cons_args=..., nn=..., index=...) -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def connect(self, v): # -> None:
        ...
    
    def disconnect(self, v): # -> None:
        ...
    
    def minimiser(self): # -> bool:
        """Check whether this vertex is str"""
        ...
    
    def print_out(self): # -> None:
        ...
    


class VertexCache:
    def __init__(self, func, func_args=..., bounds=..., g_cons=..., g_cons_args=..., indexed=...) -> None:
        ...
    
    def __getitem__(self, x, indexed=...):
        ...
    



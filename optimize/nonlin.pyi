"""
This type stub file was generated by pyright.
"""

r"""

Nonlinear solvers
------------"""
__all__ = ['broyden1', 'broyden2', 'anderson', 'linearmixing', 'diagbroyden', 'excitingmixing', 'newton_krylov']
class NoConvergence(Exception):
    ...


def maxnorm(x): # -> Any:
    ...

_doc_parts = ...
def nonlin_solve(F, x0, jacobian=..., iter=..., verbose=..., maxiter=..., f_tol=..., f_rtol=..., x_tol=..., x_rtol=..., tol_norm=..., line_search=..., callback=..., full_output=..., raise_exception=...):
    """
    Find a root of a function, """
    ...

class TerminationCondition:
    """
    Termination condition for a"""
    def __init__(self, f_tol=..., f_rtol=..., x_tol=..., x_rtol=..., iter=..., norm=...) -> None:
        ...
    
    def check(self, f, x, dx): # -> int:
        ...
    


class Jacobian:
    """
    Common interface for Jacobi"""
    def __init__(self, **kw) -> None:
        ...
    
    def aspreconditioner(self): # -> InverseJacobian:
        ...
    
    def solve(self, v, tol=...):
        ...
    
    def update(self, x, F): # -> None:
        ...
    
    def setup(self, x, F, func): # -> None:
        ...
    


class InverseJacobian:
    def __init__(self, jacobian) -> None:
        ...
    
    @property
    def shape(self):
        ...
    
    @property
    def dtype(self):
        ...
    


def asjacobian(J): # -> Jacobian | Jac | BroydenFirst | Anderson | DiagBroyden | LinearMixing | ExcitingMixing | KrylovJacobian:
    """
    Convert given object to one"""
    ...

class GenericBroyden(Jacobian):
    def setup(self, x0, f0, func): # -> None:
        ...
    
    def update(self, x, f): # -> None:
        ...
    


class LowRankMatrix:
    r"""
    A matrix represented as

  """
    def __init__(self, alpha, n, dtype) -> None:
        ...
    
    def matvec(self, v):
        """Evaluate w = M v"""
        ...
    
    def rmatvec(self, v):
        """Evaluate w = M^H v"""
        ...
    
    def solve(self, v, tol=...):
        """Evaluate w = M^-1 v"""
        ...
    
    def rsolve(self, v, tol=...):
        """Evaluate w = M^-H v"""
        ...
    
    def append(self, c, d): # -> None:
        ...
    
    def __array__(self): # -> ndarray[Unknown, Unknown] | Any:
        ...
    
    def collapse(self): # -> None:
        """Collapse the low-rank matrix to """
        ...
    
    def restart_reduce(self, rank): # -> None:
        """
        Reduce the rank of the """
        ...
    
    def simple_reduce(self, rank): # -> None:
        """
        Reduce the rank of the """
        ...
    
    def svd_reduce(self, max_rank, to_retain=...): # -> None:
        """
        Reduce the rank of the """
        ...
    


class BroydenFirst(GenericBroyden):
    r"""
    Find a root of a function, """
    def __init__(self, alpha=..., reduction_method=..., max_rank=...) -> None:
        ...
    
    def setup(self, x, F, func): # -> None:
        ...
    
    def todense(self):
        ...
    
    def solve(self, f, tol=...):
        ...
    
    def matvec(self, f):
        ...
    
    def rsolve(self, f, tol=...):
        ...
    
    def rmatvec(self, f):
        ...
    


class BroydenSecond(BroydenFirst):
    """
    Find a root of a function, """
    ...


class Anderson(GenericBroyden):
    """
    Find a root of a function, """
    def __init__(self, alpha=..., w0=..., M=...) -> None:
        ...
    
    def solve(self, f, tol=...):
        ...
    
    def matvec(self, f):
        ...
    


class DiagBroyden(GenericBroyden):
    """
    Find a root of a function, """
    def __init__(self, alpha=...) -> None:
        ...
    
    def setup(self, x, F, func): # -> None:
        ...
    
    def solve(self, f, tol=...):
        ...
    
    def matvec(self, f):
        ...
    
    def rsolve(self, f, tol=...):
        ...
    
    def rmatvec(self, f):
        ...
    
    def todense(self):
        ...
    


class LinearMixing(GenericBroyden):
    """
    Find a root of a function, """
    def __init__(self, alpha=...) -> None:
        ...
    
    def solve(self, f, tol=...):
        ...
    
    def matvec(self, f):
        ...
    
    def rsolve(self, f, tol=...):
        ...
    
    def rmatvec(self, f):
        ...
    
    def todense(self):
        ...
    


class ExcitingMixing(GenericBroyden):
    """
    Find a root of a function, """
    def __init__(self, alpha=..., alphamax=...) -> None:
        ...
    
    def setup(self, x, F, func): # -> None:
        ...
    
    def solve(self, f, tol=...):
        ...
    
    def matvec(self, f):
        ...
    
    def rsolve(self, f, tol=...):
        ...
    
    def rmatvec(self, f):
        ...
    
    def todense(self):
        ...
    


class KrylovJacobian(Jacobian):
    r"""
    Find a root of a function, """
    def __init__(self, rdiff=..., method=..., inner_maxiter=..., inner_M=..., outer_k=..., **kw) -> None:
        ...
    
    def matvec(self, v):
        ...
    
    def solve(self, rhs, tol=...):
        ...
    
    def update(self, x, f): # -> None:
        ...
    
    def setup(self, x, f, func): # -> None:
        ...
    


broyden1 = ...
broyden2 = ...
anderson = ...
linearmixing = ...
diagbroyden = ...
excitingmixing = ...
newton_krylov = ...

"""
This type stub file was generated by pyright.
"""

__all__ = ["KroghInterpolator", "krogh_interpolate", "BarycentricInterpolator", "barycentric_interpolate", "approximate_taylor_polynomial"]
class _Interpolator1D:
    """
    Common features in univaria"""
    __slots__ = ...
    def __init__(self, xi=..., yi=..., axis=...) -> None:
        ...
    
    def __call__(self, x):
        """
        Evaluate the interpolan"""
        ...
    


class _Interpolator1DWithDerivatives(_Interpolator1D):
    def derivatives(self, x, der=...):
        """
        Evaluate many derivativ"""
        ...
    
    def derivative(self, x, der=...):
        """
        Evaluate one derivative"""
        ...
    


class KroghInterpolator(_Interpolator1DWithDerivatives):
    """
    Interpolating polynomial fo"""
    def __init__(self, xi, yi, axis=...) -> None:
        ...
    


def krogh_interpolate(xi, yi, x, der=..., axis=...):
    """
    Convenience function for po"""
    ...

def approximate_taylor_polynomial(f, x, degree, scale, order=...): # -> poly1d:
    """
    Estimate the Taylor polynom"""
    ...

class BarycentricInterpolator(_Interpolator1D):
    """The interpolating polynomial for"""
    def __init__(self, xi, yi=..., axis=...) -> None:
        ...
    
    def set_yi(self, yi, axis=...): # -> None:
        """
        Update the y values to """
        ...
    
    def add_xi(self, xi, yi=...): # -> None:
        """
        Add more x values to th"""
        ...
    
    def __call__(self, x):
        """Evaluate the interpolating polyn"""
        ...
    


def barycentric_interpolate(xi, yi, x, axis=...):
    """
    Convenience function for po"""
    ...


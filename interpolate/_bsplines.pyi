"""
This type stub file was generated by pyright.
"""

__all__ = ["BSpline", "make_interp_spline", "make_lsq_spline"]
class BSpline:
    r"""Univariate spline in the B-splin"""
    def __init__(self, t, c, k, extrapolate=..., axis=...) -> None:
        ...
    
    @classmethod
    def construct_fast(cls, t, c, k, extrapolate=..., axis=...): # -> Self@BSpline:
        """Construct a spline without makin"""
        ...
    
    @property
    def tck(self): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown], int]:
        """Equivalent to ``(self.t, self.c,"""
        ...
    
    @classmethod
    def basis_element(cls, t, extrapolate=...): # -> Self@BSpline:
        """Return a B-spline basis element """
        ...
    
    def __call__(self, x, nu=..., extrapolate=...): # -> ndarray[Any, Unknown]:
        """
        Evaluate a spline funct"""
        ...
    
    def derivative(self, nu=...): # -> Self@BSpline:
        """Return a B-spline representing t"""
        ...
    
    def antiderivative(self, nu=...): # -> Self@BSpline:
        """Return a B-spline representing t"""
        ...
    
    def integrate(self, a, b, extrapolate=...):
        """Compute a definite integral of t"""
        ...
    


def make_interp_spline(x, y, k=..., t=..., bc_type=..., axis=..., check_finite=...):
    """Compute the (coefficients of) in"""
    ...

def make_lsq_spline(x, y, t, k=..., w=..., axis=..., check_finite=...): # -> BSpline:
    r"""Compute the (coefficients of) an"""
    ...


"""
This type stub file was generated by pyright.
"""

from .polyint import _Interpolator1D

__all__ = ['interp1d', 'interp2d', 'lagrange', 'PPoly', 'BPoly', 'NdPPoly', 'RegularGridInterpolator', 'interpn']
def lagrange(x, w): # -> poly1d:
    r"""
    Return a Lagrange interpola"""
    ...

class interp2d:
    """
    interp2d(x, y, z, kind='lin"""
    def __init__(self, x, y, z, kind=..., copy=..., bounds_error=..., fill_value=...) -> None:
        ...
    
    def __call__(self, x, y, dx=..., dy=..., assume_sorted=...):
        """Interpolate the function.

     """
        ...
    


class interp1d(_Interpolator1D):
    """
    Interpolate a 1-D function."""
    def __init__(self, x, y, kind=..., axis=..., copy=..., bounds_error=..., fill_value=..., assume_sorted=...) -> None:
        """ Initialize a 1-D linear interpo"""
        ...
    
    @property
    def fill_value(self): # -> tuple[Unknown, ...] | ndarray[Unknown, Unknown]:
        """The fill value."""
        ...
    
    @fill_value.setter
    def fill_value(self, fill_value): # -> None:
        ...
    


class _PPolyBase:
    """Base class for piecewise polynom"""
    __slots__ = ...
    def __init__(self, c, x, extrapolate=..., axis=...) -> None:
        ...
    
    @classmethod
    def construct_fast(cls, c, x, extrapolate=..., axis=...): # -> Self@_PPolyBase:
        """
        Construct the piecewise"""
        ...
    
    def extend(self, c, x, right=...):
        """
        Add additional breakpoi"""
        ...
    
    def __call__(self, x, nu=..., extrapolate=...): # -> ndarray[Any, Unknown]:
        """
        Evaluate the piecewise """
        ...
    


class PPoly(_PPolyBase):
    """
    Piecewise polynomial in ter"""
    def derivative(self, nu=...): # -> Self@PPoly:
        """
        Construct a new piecewi"""
        ...
    
    def antiderivative(self, nu=...): # -> Self@PPoly:
        """
        Construct a new piecewi"""
        ...
    
    def integrate(self, a, b, extrapolate=...): # -> ndarray[Any, dtype[signedinteger[Any]]] | ndarray[Any, dtype[signedinteger[Unknown]]]:
        """
        Compute a definite inte"""
        ...
    
    def solve(self, y=..., discontinuity=..., extrapolate=...): # -> ndarray[Any, Unknown]:
        """
        Find real solutions of """
        ...
    
    def roots(self, discontinuity=..., extrapolate=...): # -> ndarray[Any, Unknown]:
        """
        Find real roots of the """
        ...
    
    @classmethod
    def from_spline(cls, tck, extrapolate=...): # -> Self@PPoly:
        """
        Construct a piecewise p"""
        ...
    
    @classmethod
    def from_bernstein_basis(cls, bp, extrapolate=...): # -> Self@PPoly:
        """
        Construct a piecewise p"""
        ...
    


class BPoly(_PPolyBase):
    """Piecewise polynomial in terms of"""
    def derivative(self, nu=...): # -> Self@BPoly:
        """
        Construct a new piecewi"""
        ...
    
    def antiderivative(self, nu=...): # -> Self@BPoly:
        """
        Construct a new piecewi"""
        ...
    
    def integrate(self, a, b, extrapolate=...):
        """
        Compute a definite inte"""
        ...
    
    def extend(self, c, x, right=...):
        ...
    
    @classmethod
    def from_power_basis(cls, pp, extrapolate=...): # -> Self@BPoly:
        """
        Construct a piecewise p"""
        ...
    
    @classmethod
    def from_derivatives(cls, xi, yi, orders=..., extrapolate=...):
        """Construct a piecewise polynomial"""
        ...
    


class NdPPoly:
    """
    Piecewise tensor product po"""
    def __init__(self, c, x, extrapolate=...) -> None:
        ...
    
    @classmethod
    def construct_fast(cls, c, x, extrapolate=...): # -> Self@NdPPoly:
        """
        Construct the piecewise"""
        ...
    
    def __call__(self, x, nu=..., extrapolate=...): # -> ndarray[Any, Unknown]:
        """
        Evaluate the piecewise """
        ...
    
    def derivative(self, nu): # -> Self@NdPPoly:
        """
        Construct a new piecewi"""
        ...
    
    def antiderivative(self, nu): # -> Self@NdPPoly:
        """
        Construct a new piecewi"""
        ...
    
    def integrate_1d(self, a, b, axis, extrapolate=...): # -> ndarray[Any, dtype[signedinteger[Any]]] | ndarray[Any, dtype[signedinteger[Unknown]]] | Self@NdPPoly:
        r"""
        Compute NdPPoly represe"""
        ...
    
    def integrate(self, ranges, extrapolate=...): # -> ndarray[Unknown, Unknown] | Any | ndarray[Any, dtype[signedinteger[Any]]] | ndarray[Any, dtype[signedinteger[Unknown]]]:
        """
        Compute a definite inte"""
        ...
    


class RegularGridInterpolator:
    """
    Interpolation on a regular """
    def __init__(self, points, values, method=..., bounds_error=..., fill_value=...) -> None:
        ...
    
    def __call__(self, xi, method=...): # -> Any:
        """
        Interpolation at coordi"""
        ...
    


def interpn(points, values, xi, method=..., bounds_error=..., fill_value=...):
    """
    Multidimensional interpolat"""
    ...

class _ppform(PPoly):
    """
    Deprecated piecewise polyno"""
    def __init__(self, coeffs, breaks, fill=..., sort=...) -> None:
        ...
    
    def __call__(self, x): # -> ndarray[Any, Unknown]:
        ...
    
    @classmethod
    def fromspline(cls, xk, cvals, order, fill=...): # -> Self@_ppform:
        ...
    



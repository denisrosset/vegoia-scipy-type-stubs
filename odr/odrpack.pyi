"""
This type stub file was generated by pyright.
"""

"""
Python wrappers for Orthogonal """
__all__ = ['odr', 'OdrWarning', 'OdrError', 'OdrStop', 'Data', 'RealData', 'Model', 'Output', 'ODR', 'odr_error', 'odr_stop']
odr = ...
class OdrWarning(UserWarning):
    """
    Warning indicating that the"""
    ...


class OdrError(Exception):
    """
    Exception indicating an err"""
    ...


class OdrStop(Exception):
    """
    Exception stopping fitting."""
    ...


odr_error = OdrError
odr_stop = OdrStop
class Data:
    """
    The data to fit.

    Param"""
    def __init__(self, x, y=..., we=..., wd=..., fix=..., meta=...) -> None:
        ...
    
    def set_meta(self, **kwds): # -> None:
        """ Update the metadata dictionary """
        ...
    
    def __getattr__(self, attr):
        """ Dispatch attribute access to th"""
        ...
    


class RealData(Data):
    """
    The data, with weightings a"""
    def __init__(self, x, y=..., sx=..., sy=..., covx=..., covy=..., fix=..., meta=...) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any | ndarray[Unknown, Unknown] | None:
        ...
    


class Model:
    """
    The Model class stores info"""
    def __init__(self, fcn, fjacb=..., fjacd=..., extra_args=..., estimate=..., implicit=..., meta=...) -> None:
        ...
    
    def set_meta(self, **kwds): # -> None:
        """ Update the metadata dictionary """
        ...
    
    def __getattr__(self, attr):
        """ Dispatch attribute access to th"""
        ...
    


class Output:
    """
    The Output class stores the"""
    def __init__(self, output) -> None:
        ...
    
    def pprint(self): # -> None:
        """ Pretty-print important results."""
        ...
    


class ODR:
    """
    The ODR class gathers all i"""
    def __init__(self, data, model, beta0=..., delta0=..., ifixb=..., ifixx=..., job=..., iprint=..., errfile=..., rptfile=..., ndigit=..., taufac=..., sstol=..., partol=..., maxit=..., stpb=..., stpd=..., sclb=..., scld=..., work=..., iwork=..., overwrite=...) -> None:
        ...
    
    def set_job(self, fit_type=..., deriv=..., var_calc=..., del_init=..., restart=...): # -> None:
        """
        Sets the "job" paramete"""
        ...
    
    def set_iprint(self, init=..., so_init=..., iter=..., so_iter=..., iter_step=..., final=..., so_final=...):
        """ Set the iprint parameter for th"""
        ...
    
    def run(self): # -> Output:
        """ Run the fitting routine with al"""
        ...
    
    def restart(self, iter=...): # -> Output:
        """ Restarts the run with iter more"""
        ...
    



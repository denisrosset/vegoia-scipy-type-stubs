"""
This type stub file was generated by pyright.
"""

import numpy as np
from scipy.optimize import OptimizeResult

"""Boundary value problem solver."""
EPS = np.finfo(float).eps
def estimate_fun_jac(fun, x, y, p, f0=...): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown] | None]:
    """Estimate derivatives of an ODE s"""
    ...

def estimate_bc_jac(bc, ya, yb, p, bc0=...): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown], ndarray[Unknown, Unknown] | None]:
    """Estimate derivatives of boundary"""
    ...

def compute_jac_indices(n, m, k): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown]]:
    """Compute indices for the collocat"""
    ...

def stacked_matmul(a, b): # -> ndarray[Unknown, Unknown] | Any:
    """Stacked matrix multiply: out[i,:"""
    ...

def construct_global_jac(n, m, k, i_jac, j_jac, h, df_dy, df_dy_middle, df_dp, df_dp_middle, dbc_dya, dbc_dyb, dbc_dp): # -> csc_matrix:
    """Construct the Jacobian of the co"""
    ...

def collocation_fun(fun, y, p, x, h): # -> tuple[Unknown, Unknown, Unknown, Unknown]:
    """Evaluate collocation residuals.
"""
    ...

def prepare_sys(n, m, k, fun, bc, fun_jac, bc_jac, x, h): # -> tuple[(y: Unknown, p: Unknown) -> tuple[Unknown, Unknown, Unknown, Unknown], (y: Unknown, p: Unknown, y_middle: Unknown, f: Unknown, f_middle: Unknown, bc0: Unknown) -> csc_matrix]:
    """Create the function and the Jaco"""
    ...

def solve_newton(n, m, h, col_fun, bc, jac, y, p, B, bvp_tol, bc_tol):
    """Solve the nonlinear collocation """
    ...

def print_iteration_header(): # -> None:
    ...

def print_iteration_progress(iteration, residual, bc_residual, total_nodes, nodes_added): # -> None:
    ...

class BVPResult(OptimizeResult):
    ...


TERMINATION_MESSAGES = ...
def estimate_rms_residuals(fun, sol, x, h, p, r_middle, f_middle): # -> Any:
    """Estimate rms values of collocati"""
    ...

def create_spline(y, yp, x, h): # -> PPoly:
    """Create a cubic spline given valu"""
    ...

def modify_mesh(x, insert_1, insert_2): # -> ndarray[Unknown, Unknown]:
    """Insert nodes into a mesh.

    N"""
    ...

def wrap_functions(fun, bc, fun_jac, bc_jac, k, a, S, D, dtype):
    """Wrap functions for unified usage"""
    ...

def solve_bvp(fun, bc, x, y, p=..., S=..., fun_jac=..., bc_jac=..., tol=..., max_nodes=..., verbose=..., bc_tol=...):
    """Solve a boundary value problem f"""
    ...


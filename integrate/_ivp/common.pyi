"""
This type stub file was generated by pyright.
"""

import numpy as np

EPS = np.finfo(float).eps
def validate_first_step(first_step, t0, t_bound):
    """Assert that first_step is valid """
    ...

def validate_max_step(max_step):
    """Assert that max_Step is valid an"""
    ...

def warn_extraneous(extraneous): # -> None:
    """Display a warning for extraneous"""
    ...

def validate_tol(rtol, atol, n): # -> tuple[Any | Unknown, ndarray[Unknown, Unknown]]:
    """Validate tolerance values."""
    ...

def norm(x):
    """Compute RMS norm."""
    ...

def select_initial_step(fun, t0, y0, f0, direction, order, rtol, atol): # -> float:
    """Empirically select a good initia"""
    ...

class OdeSolution:
    """Continuous ODE solution.

    It"""
    def __init__(self, ts, interpolants) -> None:
        ...
    
    def __call__(self, t): # -> Any:
        """Evaluate the solution.

        """
        ...
    


NUM_JAC_DIFF_REJECT = EPS ** 0.875
NUM_JAC_DIFF_SMALL = EPS ** 0.75
NUM_JAC_DIFF_BIG = EPS ** 0.25
NUM_JAC_MIN_FACTOR = 1000 * EPS
NUM_JAC_FACTOR_INCREASE = ...
NUM_JAC_FACTOR_DECREASE = ...
def num_jac(fun, t, y, f, threshold, factor, sparsity=...): # -> tuple[ndarray[Unknown, Unknown], Unknown] | tuple[Unknown, Any] | tuple[csc_matrix, Any]:
    """Finite differences Jacobian appr"""
    ...


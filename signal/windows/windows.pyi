"""
This type stub file was generated by pyright.
"""

import numpy as np

"""The suite of window functions."""
__all__ = ['boxcar', 'triang', 'parzen', 'bohman', 'blackman', 'nuttall', 'blackmanharris', 'flattop', 'bartlett', 'hanning', 'barthann', 'hamming', 'kaiser', 'gaussian', 'general_cosine', 'general_gaussian', 'general_hamming', 'chebwin', 'cosine', 'hann', 'exponential', 'tukey', 'taylor', 'dpss', 'get_window']
def general_cosine(M, a, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""
    Generic weighted sum of cos"""
    ...

def boxcar(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a boxcar or rectangular w"""
    ...

def triang(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a triangular window.

   """
    ...

def parzen(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a Parzen window.

    Par"""
    ...

def bohman(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a Bohman window.

    Par"""
    ...

def blackman(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""
    Return a Blackman window.

"""
    ...

def nuttall(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a minimum 4-term Blackman"""
    ...

def blackmanharris(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a minimum 4-term Blackman"""
    ...

def flattop(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a flat top window.

    P"""
    ...

def bartlett(M, sym=...): # -> ndarray[Unknown, Unknown]:
    r"""
    Return a Bartlett window.

"""
    ...

def hann(M, sym=...): # -> ndarray[Unknown, Unknown]:
    r"""
    Return a Hann window.

    """
    ...

@np.deprecate(new_name='scipy.signal.windows.hann')
def hanning(*args, **kwargs): # -> ndarray[Unknown, Unknown] | Any:
    ...

def tukey(M, alpha=..., sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""Return a Tukey window, also know"""
    ...

def barthann(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a modified Bartlett-Hann """
    ...

def general_hamming(M, alpha, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""Return a generalized Hamming win"""
    ...

def hamming(M, sym=...): # -> ndarray[Unknown, Unknown]:
    r"""Return a Hamming window.

    Th"""
    ...

def kaiser(M, beta, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""Return a Kaiser window.

    The"""
    ...

def gaussian(M, std, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""Return a Gaussian window.

    P"""
    ...

def general_gaussian(M, p, sig, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""Return a window with a generaliz"""
    ...

def chebwin(M, at, sym=...): # -> ndarray[Unknown, Unknown]:
    r"""Return a Dolph-Chebyshev window."""
    ...

def cosine(M, sym=...): # -> ndarray[Unknown, Unknown] | Any:
    """Return a window with a simple co"""
    ...

def exponential(M, center=..., tau=..., sym=...): # -> ndarray[Unknown, Unknown] | Any:
    r"""Return an exponential (or Poisso"""
    ...

def taylor(M, nbar=..., sll=..., norm=..., sym=...): # -> ndarray[Unknown, Unknown]:
    """
    Return a Taylor window.

  """
    ...

def dpss(M, NW, Kmax=..., sym=..., norm=..., return_ratios=...):
    """
    Compute the Discrete Prolat"""
    ...

_win_equiv_raw = ...
_win_equiv = ...
_needs_param = ...
def get_window(window, Nx, fftbins=...): # -> ndarray[Unknown, Unknown] | Any:
    """
    Return a window of a given """
    ...


"""
This type stub file was generated by pyright.
"""

__all__ = ['tri', 'tril', 'triu', 'toeplitz', 'circulant', 'hankel', 'hadamard', 'leslie', 'kron', 'block_diag', 'companion', 'helmert', 'hilbert', 'invhilbert', 'pascal', 'invpascal', 'dft', 'fiedler', 'fiedler_companion', 'convolution_matrix']
def tri(N, M=..., k=..., dtype=...): # -> Any:
    """
    Construct (N, M) matrix fil"""
    ...

def tril(m, k=...): # -> Any:
    """
    Make a copy of a matrix wit"""
    ...

def triu(m, k=...): # -> Any:
    """
    Make a copy of a matrix wit"""
    ...

def toeplitz(c, r=...):
    """
    Construct a Toeplitz matrix"""
    ...

def circulant(c):
    """
    Construct a circulant matri"""
    ...

def hankel(c, r=...):
    """
    Construct a Hankel matrix.
"""
    ...

def hadamard(n, dtype=...): # -> ndarray[Unknown, Unknown]:
    """
    Construct an Hadamard matri"""
    ...

def leslie(f, s): # -> ndarray[Unknown, Unknown]:
    """
    Create a Leslie matrix.

  """
    ...

def kron(a, b):
    """
    Kronecker product.

    The"""
    ...

def block_diag(*arrs): # -> ndarray[Unknown, Unknown]:
    """
    Create a block diagonal mat"""
    ...

def companion(a): # -> ndarray[Unknown, Unknown]:
    """
    Create a companion matrix.
"""
    ...

def helmert(n, full=...):
    """
    Create an Helmert matrix of"""
    ...

def hilbert(n):
    """
    Create a Hilbert matrix of """
    ...

def invhilbert(n, exact=...): # -> ndarray[Unknown, Unknown]:
    """
    Compute the inverse of the """
    ...

def pascal(n, kind=..., exact=...): # -> ndarray[Unknown, Unknown] | float64 | Any:
    """
    Returns the n x n Pascal ma"""
    ...

def invpascal(n, kind=..., exact=...): # -> ndarray[Unknown, Unknown]:
    """
    Returns the inverse of the """
    ...

def dft(n, scale=...):
    """
    Discrete Fourier transform """
    ...

def fiedler(a): # -> ndarray[Unknown, Unknown] | Any:
    """Returns a symmetric Fiedler matr"""
    ...

def fiedler_companion(a): # -> ndarray[Unknown, Unknown]:
    """ Returns a Fiedler companion mat"""
    ...

def convolution_matrix(a, n, mode=...):
    """
    Construct a convolution mat"""
    ...


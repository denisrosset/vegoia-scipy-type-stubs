"""
This type stub file was generated by pyright.
"""

__all__ = ['solve', 'solve_triangular', 'solveh_banded', 'solve_banded', 'solve_toeplitz', 'solve_circulant', 'inv', 'det', 'lstsq', 'pinv', 'pinv2', 'pinvh', 'matrix_balance', 'matmul_toeplitz']
def solve(a, b, sym_pos=..., lower=..., overwrite_a=..., overwrite_b=..., debug=..., check_finite=..., assume_a=..., transposed=...):
    """
    Solves the linear equation """
    ...

def solve_triangular(a, b, trans=..., lower=..., unit_diagonal=..., overwrite_b=..., debug=..., check_finite=...):
    """
    Solve the equation `a x = b"""
    ...

def solve_banded(l_and_u, ab, b, overwrite_ab=..., overwrite_b=..., debug=..., check_finite=...): # -> Any:
    """
    Solve the equation a x = b """
    ...

def solveh_banded(ab, b, overwrite_ab=..., overwrite_b=..., lower=..., check_finite=...):
    """
    Solve equation a x = b. a i"""
    ...

def solve_toeplitz(c_or_cr, b, check_finite=...): # -> Any:
    """Solve a Toeplitz system using Le"""
    ...

def solve_circulant(c, b, singular=..., tol=..., caxis=..., baxis=..., outaxis=...): # -> ndarray[Unknown, Unknown]:
    """Solve C x = b for x, where C is """
    ...

def inv(a, overwrite_a=..., check_finite=...):
    """
    Compute the inverse of a ma"""
    ...

def det(a, overwrite_a=..., check_finite=...):
    """
    Compute the determinant of """
    ...

def lstsq(a, b, cond=..., overwrite_a=..., overwrite_b=..., check_finite=..., lapack_driver=...):
    """
    Compute least-squares solut"""
    ...

def pinv(a, atol=..., rtol=..., return_rank=..., check_finite=..., cond=..., rcond=...):
    """
    Compute the (Moore-Penrose)"""
    ...

def pinv2(a, cond=..., rcond=..., return_rank=..., check_finite=...):
    """
    Compute the (Moore-Penrose)"""
    ...

def pinvh(a, atol=..., rtol=..., lower=..., return_rank=..., check_finite=..., cond=..., rcond=...):
    """
    Compute the (Moore-Penrose)"""
    ...

def matrix_balance(A, permute=..., scale=..., separate=..., overwrite_a=...): # -> tuple[Unknown, tuple[ndarray[Unknown, Unknown], Unknown]] | tuple[Unknown, Unknown]:
    """
    Compute a diagonal similari"""
    ...

def matmul_toeplitz(c_or_cr, x, check_finite=..., workers=...):
    """Efficient Toeplitz Matrix-Matrix"""
    ...


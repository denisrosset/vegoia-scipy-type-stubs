"""
This type stub file was generated by pyright.
"""

__all__ = ['eig', 'eigvals', 'eigh', 'eigvalsh', 'eig_banded', 'eigvals_banded', 'eigh_tridiagonal', 'eigvalsh_tridiagonal', 'hessenberg', 'cdf2rdf']
_I = ...
def eig(a, b=..., left=..., right=..., overwrite_a=..., overwrite_b=..., check_finite=..., homogeneous_eigvals=...):
    """
    Solve an ordinary or genera"""
    ...

def eigh(a, b=..., lower=..., eigvals_only=..., overwrite_a=..., overwrite_b=..., turbo=..., eigvals=..., type=..., check_finite=..., subset_by_index=..., subset_by_value=..., driver=...):
    """
    Solve a standard or general"""
    ...

_conv_dict = ...
def eig_banded(a_band, lower=..., eigvals_only=..., overwrite_a_band=..., select=..., select_range=..., max_ev=..., check_finite=...):
    """
    Solve real symmetric or com"""
    ...

def eigvals(a, b=..., overwrite_a=..., check_finite=..., homogeneous_eigvals=...):
    """
    Compute eigenvalues from an"""
    ...

def eigvalsh(a, b=..., lower=..., overwrite_a=..., overwrite_b=..., turbo=..., eigvals=..., type=..., check_finite=..., subset_by_index=..., subset_by_value=..., driver=...):
    """
    Solves a standard or genera"""
    ...

def eigvals_banded(a_band, lower=..., overwrite_a_band=..., select=..., select_range=..., check_finite=...):
    """
    Solve real symmetric or com"""
    ...

def eigvalsh_tridiagonal(d, e, select=..., select_range=..., check_finite=..., tol=..., lapack_driver=...):
    """
    Solve eigenvalue problem fo"""
    ...

def eigh_tridiagonal(d, e, eigvals_only=..., select=..., select_range=..., check_finite=..., tol=..., lapack_driver=...):
    """
    Solve eigenvalue problem fo"""
    ...

def hessenberg(a, calc_q=..., overwrite_a=..., check_finite=...): # -> tuple[Unknown | ndarray[Unknown, Unknown], ndarray[Any, Any]] | ndarray[Unknown, Unknown] | tuple[Unknown, Unknown]:
    """
    Compute Hessenberg form of """
    ...

def cdf2rdf(w, v): # -> tuple[ndarray[Unknown, Unknown], Any]:
    """
    Converts complex eigenvalue"""
    ...


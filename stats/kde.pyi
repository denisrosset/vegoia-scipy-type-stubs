"""
This type stub file was generated by pyright.
"""

__all__ = ['gaussian_kde']
class gaussian_kde:
    """Representation of a kernel-densi"""
    def __init__(self, dataset, bw_method=..., weights=...) -> None:
        ...
    
    def evaluate(self, points):
        """Evaluate the estimated pdf on a """
        ...
    
    __call__ = ...
    def integrate_gaussian(self, mean, cov): # -> Any:
        """
        Multiply estimated dens"""
        ...
    
    def integrate_box_1d(self, low, high): # -> Any:
        """
        Computes the integral o"""
        ...
    
    def integrate_box(self, low_bounds, high_bounds, maxpts=...): # -> Any:
        """Computes the integral of a pdf o"""
        ...
    
    def integrate_kde(self, other): # -> Any:
        """
        Computes the integral o"""
        ...
    
    def resample(self, size=..., seed=...): # -> Any:
        """Randomly sample a dataset from t"""
        ...
    
    def scotts_factor(self): # -> Any:
        """Compute Scott's factor.

       """
        ...
    
    def silverman_factor(self): # -> Any:
        """Compute the Silverman factor.

 """
        ...
    
    covariance_factor = ...
    def set_bandwidth(self, bw_method=...): # -> None:
        """Compute the estimator bandwidth """
        ...
    
    def pdf(self, x):
        """
        Evaluate the estimated """
        ...
    
    def logpdf(self, x): # -> ndarray[Unknown, Unknown]:
        """
        Evaluate the log of the"""
        ...
    
    @property
    def weights(self): # -> NDArray[Any] | NDArray[floating[Any]]:
        ...
    
    @property
    def neff(self): # -> Any:
        ...
    



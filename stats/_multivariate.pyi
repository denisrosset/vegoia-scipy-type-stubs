"""
This type stub file was generated by pyright.
"""

__all__ = ['multivariate_normal', 'matrix_normal', 'dirichlet', 'wishart', 'invwishart', 'multinomial', 'special_ortho_group', 'ortho_group', 'random_correlation', 'unitary_group', 'multivariate_t', 'multivariate_hypergeom']
_LOG_2PI = ...
_LOG_2 = ...
_LOG_PI = ...
_doc_random_state = ...
class _PSD:
    """
    Compute coordinated functio"""
    def __init__(self, M, cond=..., rcond=..., lower=..., check_finite=..., allow_singular=...) -> None:
        ...
    
    @property
    def pinv(self):
        ...
    


class multi_rv_generic:
    """
    Class which encapsulates co"""
    def __init__(self, seed=...) -> None:
        ...
    
    @property
    def random_state(self): # -> RandomState | Generator:
        """ Get or set the Generator object"""
        ...
    
    @random_state.setter
    def random_state(self, seed): # -> None:
        ...
    


class multi_rv_frozen:
    """
    Class which encapsulates co"""
    @property
    def random_state(self):
        ...
    
    @random_state.setter
    def random_state(self, seed): # -> None:
        ...
    


_mvn_doc_default_callparams = ...
_mvn_doc_callparams_note = ...
_mvn_doc_frozen_callparams = ...
_mvn_doc_frozen_callparams_note = ...
mvn_docdict_params = ...
mvn_docdict_noparams = ...
class multivariate_normal_gen(multi_rv_generic):
    r"""A multivariate normal random var"""
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, mean=..., cov=..., allow_singular=..., seed=...): # -> multivariate_normal_frozen:
        """Create a frozen multivariate nor"""
        ...
    
    def logpdf(self, x, mean=..., cov=..., allow_singular=...): # -> Any:
        """Log of the multivariate normal p"""
        ...
    
    def pdf(self, x, mean=..., cov=..., allow_singular=...): # -> Any:
        """Multivariate normal probability """
        ...
    
    def logcdf(self, x, mean=..., cov=..., allow_singular=..., maxpts=..., abseps=..., releps=...): # -> Any:
        """Log of the multivariate normal c"""
        ...
    
    def cdf(self, x, mean=..., cov=..., allow_singular=..., maxpts=..., abseps=..., releps=...):
        """Multivariate normal cumulative d"""
        ...
    
    def rvs(self, mean=..., cov=..., size=..., random_state=...): # -> Any | ndarray[Any, dtype[float64]]:
        """Draw random samples from a multi"""
        ...
    
    def entropy(self, mean=..., cov=...):
        """Compute the differential entropy"""
        ...
    


multivariate_normal = ...
class multivariate_normal_frozen(multi_rv_frozen):
    def __init__(self, mean=..., cov=..., allow_singular=..., seed=..., maxpts=..., abseps=..., releps=...) -> None:
        """Create a frozen multivariate nor"""
        ...
    
    def logpdf(self, x): # -> Any:
        ...
    
    def pdf(self, x): # -> Any:
        ...
    
    def logcdf(self, x): # -> Any:
        ...
    
    def cdf(self, x):
        ...
    
    def rvs(self, size=..., random_state=...): # -> Any | ndarray[Any, dtype[float64]]:
        ...
    
    def entropy(self): # -> Any:
        """Computes the differential entrop"""
        ...
    


_matnorm_doc_default_callparams = ...
_matnorm_doc_callparams_note = ...
_matnorm_doc_frozen_callparams = ...
_matnorm_doc_frozen_callparams_note = ...
matnorm_docdict_params = ...
matnorm_docdict_noparams = ...
class matrix_normal_gen(multi_rv_generic):
    r"""A matrix normal random variable."""
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, mean=..., rowcov=..., colcov=..., seed=...): # -> matrix_normal_frozen:
        """Create a frozen matrix normal di"""
        ...
    
    def logpdf(self, X, mean=..., rowcov=..., colcov=...):
        """Log of the matrix normal probabi"""
        ...
    
    def pdf(self, X, mean=..., rowcov=..., colcov=...): # -> Any:
        """Matrix normal probability densit"""
        ...
    
    def rvs(self, mean=..., rowcov=..., colcov=..., size=..., random_state=...):
        """Draw random samples from a matri"""
        ...
    


matrix_normal = ...
class matrix_normal_frozen(multi_rv_frozen):
    """Create a frozen matrix normal di"""
    def __init__(self, mean=..., rowcov=..., colcov=..., seed=...) -> None:
        ...
    
    def logpdf(self, X):
        ...
    
    def pdf(self, X): # -> Any:
        ...
    
    def rvs(self, size=..., random_state=...):
        ...
    


_dirichlet_doc_default_callparams = ...
_dirichlet_doc_frozen_callparams = ...
_dirichlet_doc_frozen_callparams_note = ...
dirichlet_docdict_params = ...
dirichlet_docdict_noparams = ...
class dirichlet_gen(multi_rv_generic):
    r"""A Dirichlet random variable.

  """
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, alpha, seed=...): # -> dirichlet_frozen:
        ...
    
    def logpdf(self, x, alpha): # -> Any:
        """Log of the Dirichlet probability"""
        ...
    
    def pdf(self, x, alpha): # -> Any:
        """The Dirichlet probability densit"""
        ...
    
    def mean(self, alpha): # -> Any:
        """Compute the mean of the dirichle"""
        ...
    
    def var(self, alpha): # -> Any:
        """Compute the variance of the diri"""
        ...
    
    def entropy(self, alpha):
        """Compute the differential entropy"""
        ...
    
    def rvs(self, alpha, size=..., random_state=...): # -> ndarray[Any, dtype[float64]]:
        """Draw random samples from a Diric"""
        ...
    


dirichlet = ...
class dirichlet_frozen(multi_rv_frozen):
    def __init__(self, alpha, seed=...) -> None:
        ...
    
    def logpdf(self, x): # -> Any:
        ...
    
    def pdf(self, x): # -> Any:
        ...
    
    def mean(self): # -> Any:
        ...
    
    def var(self): # -> Any:
        ...
    
    def entropy(self):
        ...
    
    def rvs(self, size=..., random_state=...): # -> ndarray[Any, dtype[float64]]:
        ...
    


_wishart_doc_default_callparams = ...
_wishart_doc_callparams_note = ...
_wishart_doc_frozen_callparams = ...
_wishart_doc_frozen_callparams_note = ...
wishart_docdict_params = ...
wishart_docdict_noparams = ...
class wishart_gen(multi_rv_generic):
    r"""A Wishart random variable.

    """
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, df=..., scale=..., seed=...): # -> wishart_frozen:
        """Create a frozen Wishart distribu"""
        ...
    
    def logpdf(self, x, df, scale):
        """Log of the Wishart probability d"""
        ...
    
    def pdf(self, x, df, scale): # -> Any:
        """Wishart probability density func"""
        ...
    
    def mean(self, df, scale): # -> Any | ndarray[Any, dtype[signedinteger[Any]]]:
        """Mean of the Wishart distribution"""
        ...
    
    def mode(self, df, scale): # -> Any | ndarray[Any, dtype[signedinteger[Any]]] | None:
        """Mode of the Wishart distribution"""
        ...
    
    def var(self, df, scale): # -> Any | ndarray[Any, dtype[signedinteger[Any]]]:
        """Variance of the Wishart distribu"""
        ...
    
    def rvs(self, df, scale, size=..., random_state=...): # -> Any | ndarray[Any, Unknown]:
        """Draw random samples from a Wisha"""
        ...
    
    def entropy(self, df, scale):
        """Compute the differential entropy"""
        ...
    


wishart = ...
class wishart_frozen(multi_rv_frozen):
    """Create a frozen Wishart distribu"""
    def __init__(self, df, scale, seed=...) -> None:
        ...
    
    def logpdf(self, x):
        ...
    
    def pdf(self, x): # -> Any:
        ...
    
    def mean(self): # -> Any | ndarray[Any, dtype[signedinteger[Any]]]:
        ...
    
    def mode(self): # -> Any | ndarray[Any, dtype[signedinteger[Any]]] | None:
        ...
    
    def var(self): # -> Any | ndarray[Any, dtype[signedinteger[Any]]]:
        ...
    
    def rvs(self, size=..., random_state=...): # -> Any | ndarray[Any, Unknown]:
        ...
    
    def entropy(self):
        ...
    


class invwishart_gen(wishart_gen):
    r"""An inverse Wishart random variab"""
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, df=..., scale=..., seed=...): # -> invwishart_frozen:
        """Create a frozen inverse Wishart """
        ...
    
    def logpdf(self, x, df, scale):
        """Log of the inverse Wishart proba"""
        ...
    
    def pdf(self, x, df, scale): # -> Any:
        """Inverse Wishart probability dens"""
        ...
    
    def mean(self, df, scale): # -> Any | ndarray[Any, dtype[floating[Any]]] | None:
        """Mean of the inverse Wishart dist"""
        ...
    
    def mode(self, df, scale): # -> Any | ndarray[Any, dtype[floating[Any]]]:
        """Mode of the inverse Wishart dist"""
        ...
    
    def var(self, df, scale): # -> Any | ndarray[Any, dtype[floating[Any]]] | None:
        """Variance of the inverse Wishart """
        ...
    
    def rvs(self, df, scale, size=..., random_state=...): # -> Any | ndarray[Any, Unknown]:
        """Draw random samples from an inve"""
        ...
    
    def entropy(self):
        ...
    


invwishart = ...
class invwishart_frozen(multi_rv_frozen):
    def __init__(self, df, scale, seed=...) -> None:
        """Create a frozen inverse Wishart """
        ...
    
    def logpdf(self, x):
        ...
    
    def pdf(self, x): # -> Any:
        ...
    
    def mean(self): # -> Any | ndarray[Any, dtype[floating[Any]]] | None:
        ...
    
    def mode(self): # -> Any | ndarray[Any, dtype[floating[Any]]]:
        ...
    
    def var(self): # -> Any | ndarray[Any, dtype[floating[Any]]] | None:
        ...
    
    def rvs(self, size=..., random_state=...): # -> Any | ndarray[Any, Unknown]:
        ...
    
    def entropy(self):
        ...
    


_multinomial_doc_default_callparams = ...
_multinomial_doc_callparams_note = ...
_multinomial_doc_frozen_callparams = ...
_multinomial_doc_frozen_callparams_note = ...
multinomial_docdict_params = ...
multinomial_docdict_noparams = ...
class multinomial_gen(multi_rv_generic):
    r"""A multinomial random variable.

"""
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, n, p, seed=...): # -> multinomial_frozen:
        """Create a frozen multinomial dist"""
        ...
    
    def logpmf(self, x, n, p): # -> float | ndarray[Unknown, Unknown]:
        """Log of the Multinomial probabili"""
        ...
    
    def pmf(self, x, n, p): # -> NDArray[Any]:
        """Multinomial probability mass fun"""
        ...
    
    def mean(self, n, p): # -> float | ndarray[Unknown, Unknown]:
        """Mean of the Multinomial distribu"""
        ...
    
    def cov(self, n, p): # -> float | ndarray[Unknown, Unknown]:
        """Covariance matrix of the multino"""
        ...
    
    def entropy(self, n, p): # -> float | ndarray[Unknown, Unknown]:
        r"""Compute the entropy of the multi"""
        ...
    
    def rvs(self, n, p, size=..., random_state=...): # -> ndarray[Any, dtype[int_]] | ndarray[Any, dtype[int64]]:
        """Draw random samples from a Multi"""
        ...
    


multinomial = ...
class multinomial_frozen(multi_rv_frozen):
    r"""Create a frozen Multinomial dist"""
    def __init__(self, n, p, seed=...) -> None:
        ...
    
    def logpmf(self, x): # -> float | ndarray[Unknown, Unknown]:
        ...
    
    def pmf(self, x): # -> NDArray[Any]:
        ...
    
    def mean(self): # -> float | ndarray[Unknown, Unknown]:
        ...
    
    def cov(self): # -> float | ndarray[Unknown, Unknown]:
        ...
    
    def entropy(self): # -> float | ndarray[Unknown, Unknown]:
        ...
    
    def rvs(self, size=..., random_state=...): # -> ndarray[Any, dtype[int_]] | ndarray[Any, dtype[int64]]:
        ...
    


class special_ortho_group_gen(multi_rv_generic):
    r"""A matrix-valued SO(N) random var"""
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, dim=..., seed=...): # -> special_ortho_group_frozen:
        """Create a frozen SO(N) distributi"""
        ...
    
    def rvs(self, dim, size=..., random_state=...): # -> ndarray[Unknown, Unknown] | NDArray[bool_]:
        """Draw random samples from SO(N).
"""
        ...
    


special_ortho_group = ...
class special_ortho_group_frozen(multi_rv_frozen):
    def __init__(self, dim=..., seed=...) -> None:
        """Create a frozen SO(N) distributi"""
        ...
    
    def rvs(self, size=..., random_state=...): # -> ndarray[Unknown, Unknown] | NDArray[bool_]:
        ...
    


class ortho_group_gen(multi_rv_generic):
    r"""A matrix-valued O(N) random vari"""
    def __init__(self, seed=...) -> None:
        ...
    
    def rvs(self, dim, size=..., random_state=...): # -> ndarray[Unknown, Unknown] | ndarray[Any, Any]:
        """Draw random samples from O(N).

"""
        ...
    


ortho_group = ...
class random_correlation_gen(multi_rv_generic):
    r"""A random correlation matrix.

  """
    def __init__(self, seed=...) -> None:
        ...
    
    def rvs(self, eigs, random_state=..., tol=..., diag_tol=...):
        """Draw random correlation matrices"""
        ...
    


random_correlation = ...
class unitary_group_gen(multi_rv_generic):
    r"""A matrix-valued U(N) random vari"""
    def __init__(self, seed=...) -> None:
        ...
    
    def rvs(self, dim, size=..., random_state=...): # -> ndarray[Unknown, Unknown]:
        """Draw random samples from U(N).

"""
        ...
    


unitary_group = ...
_mvt_doc_default_callparams = ...
_mvt_doc_callparams_note = ...
_mvt_doc_frozen_callparams_note = ...
mvt_docdict_params = ...
mvt_docdict_noparams = ...
class multivariate_t_gen(multi_rv_generic):
    r"""A multivariate t-distributed ran"""
    def __init__(self, seed=...) -> None:
        """Initialize a multivariate t-dist"""
        ...
    
    def __call__(self, loc=..., shape=..., df=..., allow_singular=..., seed=...): # -> multivariate_normal_frozen | multivariate_t_frozen:
        """Create a frozen multivariate t-d"""
        ...
    
    def pdf(self, x, loc=..., shape=..., df=..., allow_singular=...): # -> Any:
        """Multivariate t-distribution prob"""
        ...
    
    def logpdf(self, x, loc=..., shape=..., df=...):
        """Log of the multivariate t-distri"""
        ...
    
    def rvs(self, loc=..., shape=..., df=..., size=..., random_state=...):
        """Draw random samples from a multi"""
        ...
    


class multivariate_t_frozen(multi_rv_frozen):
    def __init__(self, loc=..., shape=..., df=..., allow_singular=..., seed=...) -> None:
        """Create a frozen multivariate t d"""
        ...
    
    def logpdf(self, x):
        ...
    
    def pdf(self, x): # -> Any:
        ...
    
    def rvs(self, size=..., random_state=...):
        ...
    


multivariate_t = ...
_mhg_doc_default_callparams = ...
_mhg_doc_callparams_note = ...
_mhg_doc_frozen_callparams = ...
_mhg_doc_frozen_callparams_note = ...
mhg_docdict_params = ...
mhg_docdict_noparams = ...
class multivariate_hypergeom_gen(multi_rv_generic):
    r"""A multivariate hypergeometric ra"""
    def __init__(self, seed=...) -> None:
        ...
    
    def __call__(self, m, n, seed=...): # -> multivariate_hypergeom_frozen:
        """Create a frozen multivariate_hyp"""
        ...
    
    def logpmf(self, x, m, n): # -> float | Any | ndarray[Unknown, Unknown]:
        """Log of the multivariate hypergeo"""
        ...
    
    def pmf(self, x, m, n): # -> Any:
        """Multivariate hypergeometric prob"""
        ...
    
    def mean(self, m, n): # -> float | Any | ndarray[Unknown, Unknown]:
        """Mean of the multivariate hyperge"""
        ...
    
    def var(self, m, n): # -> float | Any | ndarray[Unknown, Unknown]:
        """Variance of the multivariate hyp"""
        ...
    
    def cov(self, m, n): # -> float | Any | ndarray[Unknown, Unknown]:
        """Covariance matrix of the multiva"""
        ...
    
    def rvs(self, m, n, size=..., random_state=...): # -> ndarray[Unknown, Unknown]:
        """Draw random samples from a multi"""
        ...
    


multivariate_hypergeom = ...
class multivariate_hypergeom_frozen(multi_rv_frozen):
    def __init__(self, m, n, seed=...) -> None:
        ...
    
    def logpmf(self, x): # -> float | Any | ndarray[Unknown, Unknown]:
        ...
    
    def pmf(self, x): # -> Any:
        ...
    
    def mean(self): # -> float | Any | ndarray[Unknown, Unknown]:
        ...
    
    def var(self): # -> float | Any | ndarray[Unknown, Unknown]:
        ...
    
    def cov(self): # -> float | Any | ndarray[Unknown, Unknown]:
        ...
    
    def rvs(self, size=..., random_state=...): # -> ndarray[Unknown, Unknown]:
        ...
    



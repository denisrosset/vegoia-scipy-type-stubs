"""
This type stub file was generated by pyright.
"""

"""
An extension of scipy.stats.sta"""
__all__ = ['argstoarray', 'count_tied_groups', 'describe', 'f_oneway', 'find_repeats', 'friedmanchisquare', 'kendalltau', 'kendalltau_seasonal', 'kruskal', 'kruskalwallis', 'ks_twosamp', 'ks_2samp', 'kurtosis', 'kurtosistest', 'ks_1samp', 'kstest', 'linregress', 'mannwhitneyu', 'meppf', 'mode', 'moment', 'mquantiles', 'msign', 'normaltest', 'obrientransform', 'pearsonr', 'plotting_positions', 'pointbiserialr', 'rankdata', 'scoreatpercentile', 'sem', 'sen_seasonal_slopes', 'skew', 'skewtest', 'spearmanr', 'siegelslopes', 'theilslopes', 'tmax', 'tmean', 'tmin', 'trim', 'trimboth', 'trimtail', 'trima', 'trimr', 'trimmed_mean', 'trimmed_std', 'trimmed_stde', 'trimmed_var', 'tsem', 'ttest_1samp', 'ttest_onesamp', 'ttest_ind', 'ttest_rel', 'tvar', 'variation', 'winsorize', 'brunnermunzel']
def argstoarray(*args):
    """
    Constructs a 2D array from """
    ...

def find_repeats(arr): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown]] | tuple[Any, Unknown]:
    """Find repeats in arr and return a"""
    ...

def count_tied_groups(x, use_missing=...): # -> dict[Unknown, int]:
    """
    Counts the number of tied v"""
    ...

def rankdata(data, axis=..., use_missing=...): # -> ndarray[Any, Unknown] | ndarray[Unknown, Unknown]:
    """Returns the rank (also known as """
    ...

ModeResult = ...
def mode(a, axis=...): # -> ModeResult:
    """
    Returns an array of the mod"""
    ...

def msign(x):
    """Returns the sign of x, or 0 if x"""
    ...

def pearsonr(x, y): # -> tuple[MaskedConstant, MaskedConstant] | tuple[float, float] | tuple[Any, float] | tuple[float, Any]:
    """
    Calculates a Pearson correl"""
    ...

SpearmanrResult = ...
def spearmanr(x, y=..., use_ties=..., axis=..., nan_policy=..., alternative=...): # -> SpearmanrResult:
    """
    Calculates a Spearman rank-"""
    ...

KendalltauResult = ...
def kendalltau(x, y, use_ties=..., use_missing=..., method=...):
    """
    Computes Kendall's rank cor"""
    ...

def kendalltau_seasonal(x): # -> dict[str, Unknown | Any]:
    """
    Computes a multivariate Ken"""
    ...

PointbiserialrResult = ...
def pointbiserialr(x, y): # -> PointbiserialrResult:
    """Calculates a point biserial corr"""
    ...

def linregress(x, y=...): # -> LinregressResult:
    r"""
    Linear regression calculati"""
    ...

def theilslopes(y, x=..., alpha=...): # -> tuple[Unknown, Unknown, Unknown | Any, Unknown | Any]:
    r"""
    Computes the Theil-Sen esti"""
    ...

def siegelslopes(y, x=..., method=...): # -> tuple[Unknown, Unknown]:
    r"""
    Computes the Siegel estimat"""
    ...

def sen_seasonal_slopes(x): # -> tuple[Unknown, Unknown]:
    ...

Ttest_1sampResult = ...
def ttest_1samp(a, popmean, axis=...): # -> tuple[float, float] | Ttest_1sampResult:
    """
    Calculates the T-test for t"""
    ...

ttest_onesamp = ...
Ttest_indResult = ...
def ttest_ind(a, b, axis=..., equal_var=...): # -> Ttest_indResult:
    """
    Calculates the T-test for t"""
    ...

Ttest_relResult = ...
def ttest_rel(a, b, axis=...): # -> Ttest_relResult:
    """
    Calculates the T-test on TW"""
    ...

MannwhitneyuResult = ...
def mannwhitneyu(x, y, use_continuity=...): # -> MannwhitneyuResult:
    """
    Computes the Mann-Whitney s"""
    ...

KruskalResult = ...
def kruskal(*args): # -> KruskalResult:
    """
    Compute the Kruskal-Wallis """
    ...

kruskalwallis = ...
def ks_1samp(x, cdf, args=..., alternative=..., mode=...): # -> KstestResult:
    """
    Computes the Kolmogorov-Smi"""
    ...

def ks_2samp(data1, data2, alternative=..., mode=...):
    """
    Computes the Kolmogorov-Smi"""
    ...

ks_twosamp = ...
def kstest(data1, data2, args=..., alternative=..., mode=...): # -> KstestResult:
    """

    Parameters
    ----------
"""
    ...

def trima(a, limits=..., inclusive=...):
    """
    Trims an array by masking t"""
    ...

def trimr(a, limits=..., inclusive=..., axis=...):
    """
    Trims an array by masking s"""
    ...

trimdoc = ...
def trim(a, limits=..., inclusive=..., relative=..., axis=...):
    """
    Trims an array by masking t"""
    ...

if trim.__doc__:
    ...
def trimboth(data, proportiontocut=..., inclusive=..., axis=...):
    """
    Trims the smallest and larg"""
    ...

def trimtail(data, proportiontocut=..., tail=..., inclusive=..., axis=...):
    """
    Trims the data by masking v"""
    ...

trim1 = ...
def trimmed_mean(a, limits=..., inclusive=..., relative=..., axis=...):
    """Returns the trimmed mean of the """
    ...

if trimmed_mean.__doc__:
    ...
def trimmed_var(a, limits=..., inclusive=..., relative=..., axis=..., ddof=...):
    """Returns the trimmed variance of """
    ...

if trimmed_var.__doc__:
    ...
def trimmed_std(a, limits=..., inclusive=..., relative=..., axis=..., ddof=...):
    """Returns the trimmed standard dev"""
    ...

if trimmed_std.__doc__:
    ...
def trimmed_stde(a, limits=..., inclusive=..., axis=...):
    """
    Returns the standard error """
    ...

def tmean(a, limits=..., inclusive=..., axis=...):
    """
    Compute the trimmed mean.

"""
    ...

def tvar(a, limits=..., inclusive=..., axis=..., ddof=...):
    """
    Compute the trimmed varianc"""
    ...

def tmin(a, lowerlimit=..., axis=..., inclusive=...):
    """
    Compute the trimmed minimum"""
    ...

def tmax(a, upperlimit=..., axis=..., inclusive=...):
    """
    Compute the trimmed maximum"""
    ...

def tsem(a, limits=..., inclusive=..., axis=..., ddof=...): # -> Any:
    """
    Compute the trimmed standar"""
    ...

def winsorize(a, limits=..., inclusive=..., inplace=..., axis=..., nan_policy=...):
    """Returns a Winsorized version of """
    ...

def moment(a, moment=..., axis=...): # -> float64:
    """
    Calculates the nth moment a"""
    ...

def variation(a, axis=..., ddof=...):
    """
    Compute the coefficient of """
    ...

def skew(a, axis=..., bias=...):
    """
    Computes the skewness of a """
    ...

def kurtosis(a, axis=..., fisher=..., bias=...):
    """
    Computes the kurtosis (Fish"""
    ...

DescribeResult = ...
def describe(a, axis=..., ddof=..., bias=...): # -> DescribeResult:
    """
    Computes several descriptiv"""
    ...

def stde_median(data, axis=...): # -> Any:
    """Returns the McKean-Schrader esti"""
    ...

SkewtestResult = ...
def skewtest(a, axis=...): # -> SkewtestResult:
    """
    Tests whether the skew is d"""
    ...

KurtosistestResult = ...
def kurtosistest(a, axis=...): # -> KurtosistestResult:
    """
    Tests whether a dataset has"""
    ...

NormaltestResult = ...
def normaltest(a, axis=...): # -> NormaltestResult:
    """
    Tests whether a sample diff"""
    ...

def mquantiles(a, prob=..., alphap=..., betap=..., axis=..., limit=...): # -> Any:
    """
    Computes empirical quantile"""
    ...

def scoreatpercentile(data, per, limit=..., alphap=..., betap=...): # -> Any:
    """Calculate the score at the given"""
    ...

def plotting_positions(data, alpha=..., beta=...):
    """
    Returns plotting positions """
    ...

meppf = ...
def obrientransform(*args):
    """
    Computes a transform on inp"""
    ...

def sem(a, axis=..., ddof=...):
    """
    Calculates the standard err"""
    ...

F_onewayResult = ...
def f_oneway(*args): # -> F_onewayResult:
    """
    Performs a 1-way ANOVA, ret"""
    ...

FriedmanchisquareResult = ...
def friedmanchisquare(*args): # -> FriedmanchisquareResult:
    """Friedman Chi-Square is a non-par"""
    ...

BrunnerMunzelResult = ...
def brunnermunzel(x, y, alternative=..., distribution=...): # -> BrunnerMunzelResult:
    """
    Computes the Brunner-Munzel"""
    ...


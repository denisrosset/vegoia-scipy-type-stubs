"""
This type stub file was generated by pyright.
"""

docheaders = ...
_doc_rvs = ...
_doc_pdf = ...
_doc_logpdf = ...
_doc_pmf = ...
_doc_logpmf = ...
_doc_cdf = ...
_doc_logcdf = ...
_doc_sf = ...
_doc_logsf = ...
_doc_ppf = ...
_doc_isf = ...
_doc_moment = ...
_doc_stats = ...
_doc_entropy = ...
_doc_fit = ...
_doc_expect = ...
_doc_expect_discrete = ...
_doc_median = ...
_doc_mean = ...
_doc_var = ...
_doc_std = ...
_doc_interval = ...
_doc_allmethods = ...
_doc_default_longsummary = ...
_doc_default_frozen_note = ...
_doc_default_example = ...
_doc_default_locscale = ...
_doc_default = ...
_doc_default_before_notes = ...
docdict = ...
docdict_discrete = ...
_doc_disc_methods = ...
_doc_disc_methods_err_varname = ...
_doc_allmethods = ...
_doc_default_frozen_note = ...
_doc_default_discrete_example = ...
_doc_default_discrete_locscale = ...
_doc_default_before_notes = ...
_doc_default_disc = ...
class rv_frozen:
    def __init__(self, dist, *args, **kwds) -> None:
        ...
    
    @property
    def random_state(self):
        ...
    
    @random_state.setter
    def random_state(self, seed): # -> None:
        ...
    
    def pdf(self, x):
        ...
    
    def logpdf(self, x):
        ...
    
    def cdf(self, x):
        ...
    
    def logcdf(self, x):
        ...
    
    def ppf(self, q):
        ...
    
    def isf(self, q):
        ...
    
    def rvs(self, size=..., random_state=...):
        ...
    
    def sf(self, x):
        ...
    
    def logsf(self, x):
        ...
    
    def stats(self, moments=...):
        ...
    
    def median(self):
        ...
    
    def mean(self):
        ...
    
    def var(self):
        ...
    
    def std(self):
        ...
    
    def moment(self, n):
        ...
    
    def entropy(self):
        ...
    
    def pmf(self, k):
        ...
    
    def logpmf(self, k):
        ...
    
    def interval(self, alpha):
        ...
    
    def expect(self, func=..., lb=..., ub=..., conditional=..., **kwds): # -> Any | float:
        ...
    
    def support(self):
        ...
    


def argsreduce(cond, *args): # -> list[Unknown] | List[ndarray[Unknown, Unknown]] | list[Unknown | ndarray[Unknown, Unknown]]:
    """Clean arguments to:

    1. Ensu"""
    ...

parse_arg_template = ...
class rv_generic:
    """Class which encapsulates common """
    def __init__(self, seed=...) -> None:
        ...
    
    @property
    def random_state(self): # -> RandomState | Generator:
        """Get or set the generator object """
        ...
    
    @random_state.setter
    def random_state(self, seed): # -> None:
        ...
    
    def __setstate__(self, state): # -> None:
        ...
    
    def freeze(self, *args, **kwds): # -> rv_frozen:
        """Freeze the distribution for the """
        ...
    
    def __call__(self, *args, **kwds): # -> rv_frozen:
        ...
    
    def rvs(self, *args, **kwds): # -> int:
        """Random variates of given type.

"""
        ...
    
    def stats(self, *args, **kwds):
        """Some statistics of the given RV."""
        ...
    
    def entropy(self, *args, **kwds): # -> ndarray[Unknown, Unknown]:
        """Differential entropy of the RV.
"""
        ...
    
    def moment(self, n, *args, **kwds): # -> float:
        """n-th order non-central moment of"""
        ...
    
    def median(self, *args, **kwds):
        """Median of the distribution.

   """
        ...
    
    def mean(self, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Mean of the distribution.

     """
        ...
    
    def var(self, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Variance of the distribution.

 """
        ...
    
    def std(self, *args, **kwds): # -> Any:
        """Standard deviation of the distri"""
        ...
    
    def interval(self, alpha, *args, **kwds): # -> tuple[Unknown, Unknown]:
        """Confidence interval with equal a"""
        ...
    
    def support(self, *args, **kwargs): # -> tuple[Unknown, Unknown]:
        """Support of the distribution.

  """
        ...
    


class rv_continuous(rv_generic):
    """A generic continuous random vari"""
    def __init__(self, momtype=..., a=..., b=..., xtol=..., badvalue=..., name=..., longname=..., shapes=..., extradoc=..., seed=...) -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def pdf(self, x, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Probability density function at """
        ...
    
    def logpdf(self, x, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Log of the probability density f"""
        ...
    
    def cdf(self, x, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """
        Cumulative distribution"""
        ...
    
    def logcdf(self, x, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Log of the cumulative distributi"""
        ...
    
    def sf(self, x, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Survival function (1 - `cdf`) at"""
        ...
    
    def logsf(self, x, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Log of the survival function of """
        ...
    
    def ppf(self, q, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Percent point function (inverse """
        ...
    
    def isf(self, q, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Inverse survival function (inver"""
        ...
    
    def nnlf(self, theta, x): # -> float | Any:
        """Negative loglikelihood function."""
        ...
    
    def fit(self, data, *args, **kwds): # -> tuple[Unknown, ...]:
        """
        Return estimates of sha"""
        ...
    
    def fit_loc_scale(self, data, *args): # -> tuple[Unknown | Literal[0], Any | Literal[1]]:
        """
        Estimate loc and scale """
        ...
    
    def expect(self, func=..., args=..., loc=..., scale=..., lb=..., ub=..., conditional=..., **kwds):
        """Calculate expected value of a fu"""
        ...
    


class rv_discrete(rv_generic):
    """A generic discrete random variab"""
    def __new__(cls, a=..., b=..., name=..., badvalue=..., moment_tol=..., values=..., inc=..., longname=..., shapes=..., extradoc=..., seed=...): # -> rv_sample | Self@rv_discrete:
        ...
    
    def __init__(self, a=..., b=..., name=..., badvalue=..., moment_tol=..., values=..., inc=..., longname=..., shapes=..., extradoc=..., seed=...) -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def rvs(self, *args, **kwargs): # -> int:
        """Random variates of given type.

"""
        ...
    
    def pmf(self, k, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Probability mass function at k o"""
        ...
    
    def logpmf(self, k, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Log of the probability mass func"""
        ...
    
    def cdf(self, k, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Cumulative distribution function"""
        ...
    
    def logcdf(self, k, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Log of the cumulative distributi"""
        ...
    
    def sf(self, k, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Survival function (1 - `cdf`) at"""
        ...
    
    def logsf(self, k, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Log of the survival function of """
        ...
    
    def ppf(self, q, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Percent point function (inverse """
        ...
    
    def isf(self, q, *args, **kwds): # -> Any | ndarray[Unknown, Unknown]:
        """Inverse survival function (inver"""
        ...
    
    def expect(self, func=..., args=..., loc=..., lb=..., ub=..., conditional=..., maxcount=..., tolerance=..., chunksize=...): # -> Any | float:
        """
        Calculate expected valu"""
        ...
    


class rv_sample(rv_discrete):
    """A 'sample' discrete distribution"""
    def __init__(self, a=..., b=..., name=..., badvalue=..., moment_tol=..., values=..., inc=..., longname=..., shapes=..., extradoc=..., seed=...) -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def generic_moment(self, n): # -> Any:
        ...
    


def get_distribution_names(namespace_pairs, rv_base_class): # -> tuple[list[Unknown], list[Unknown]]:
    """Collect names of statistical dis"""
    ...


"""
This type stub file was generated by pyright.
"""

__all__ = ['mvsdist', 'bayes_mvs', 'kstat', 'kstatvar', 'probplot', 'ppcc_max', 'ppcc_plot', 'boxcox_llf', 'boxcox', 'boxcox_normmax', 'boxcox_normplot', 'shapiro', 'anderson', 'ansari', 'bartlett', 'levene', 'binom_test', 'fligner', 'mood', 'wilcoxon', 'median_test', 'circmean', 'circvar', 'circstd', 'anderson_ksamp', 'yeojohnson_llf', 'yeojohnson', 'yeojohnson_normmax', 'yeojohnson_normplot']
Mean = ...
Variance = ...
Std_dev = ...
def bayes_mvs(data, alpha=...): # -> tuple[Mean, Variance, Std_dev]:
    r"""
    Bayesian confidence interva"""
    ...

def mvsdist(data): # -> tuple[rv_frozen, rv_frozen, rv_frozen]:
    """
    'Frozen' distributions for """
    ...

def kstat(data, n=...): # -> float | Any:
    r"""
    Return the nth k-statistic """
    ...

def kstatvar(data, n=...): # -> float | Any:
    r"""Return an unbiased estimator of """
    ...

def probplot(x, sparams=..., dist=..., fit=..., plot=..., rvalue=...):
    """
    Calculate quantiles for a p"""
    ...

def ppcc_max(x, brack=..., dist=...): # -> tuple[Unknown, Unknown, Unknown, Unknown]:
    """Calculate the shape parameter th"""
    ...

def ppcc_plot(x, a, b, dist=..., plot=..., N=...): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown]]:
    """Calculate and optionally plot pr"""
    ...

def boxcox_llf(lmb, data): # -> float:
    r"""The boxcox log-likelihood functi"""
    ...

def boxcox(x, lmbda=..., alpha=..., optimizer=...): # -> ndarray[Unknown, Unknown] | Any | tuple[Unknown, Any] | tuple[Unknown, Any, tuple[tuple[Unknown, RootResults] | Unknown, tuple[Unknown, RootResults] | Unknown]]:
    r"""Return a dataset transformed by """
    ...

def boxcox_normmax(x, brack=..., method=..., optimizer=...): # -> Any:
    """Compute optimal Box-Cox transfor"""
    ...

def boxcox_normplot(x, la, lb, plot=..., N=...): # -> ndarray[Unknown, Unknown] | tuple[ndarray[Unknown, Unknown], NDArray[floating[Any]]]:
    """Compute parameters for a Box-Cox"""
    ...

def yeojohnson(x, lmbda=...): # -> ndarray[Unknown, Unknown] | tuple[Unknown, tuple[Unknown, Unknown, Unknown, Unknown] | Unknown]:
    r"""Return a dataset transformed by """
    ...

def yeojohnson_llf(lmb, data): # -> float:
    r"""The yeojohnson log-likelihood fu"""
    ...

def yeojohnson_normmax(x, brack=...): # -> tuple[Unknown, Unknown, Unknown, Unknown]:
    """Compute optimal Yeo-Johnson tran"""
    ...

def yeojohnson_normplot(x, la, lb, plot=..., N=...): # -> ndarray[Unknown, Unknown] | tuple[ndarray[Unknown, Unknown], NDArray[floating[Any]]]:
    """Compute parameters for a Yeo-Joh"""
    ...

ShapiroResult = ...
def shapiro(x): # -> ShapiroResult:
    """Perform the Shapiro-Wilk test fo"""
    ...

_Avals_norm = ...
_Avals_expon = ...
_Avals_gumbel = ...
_Avals_logistic = ...
AndersonResult = ...
def anderson(x, dist=...): # -> AndersonResult:
    """Anderson-Darling test for data c"""
    ...

Anderson_ksampResult = ...
def anderson_ksamp(samples, midrank=...): # -> Anderson_ksampResult:
    """The Anderson-Darling test for k-"""
    ...

AnsariResult = ...
class _ABW:
    """Distribution of Ansari-Bradley W"""
    def __init__(self) -> None:
        """Minimal initializer."""
        ...
    
    def pmf(self, k, n, m): # -> Any:
        """Probability mass function."""
        ...
    
    def cdf(self, k, n, m): # -> Any:
        """Cumulative distribution function"""
        ...
    
    def sf(self, k, n, m): # -> Any:
        """Survival function."""
        ...
    


_abw_state = ...
def ansari(x, y, alternative=...):
    """Perform the Ansari-Bradley test """
    ...

BartlettResult = ...
def bartlett(*args): # -> BartlettResult:
    """Perform Bartlett's test for equa"""
    ...

LeveneResult = ...
def levene(*args, center=..., proportiontocut=...): # -> LeveneResult:
    """Perform Levene test for equal va"""
    ...

def binom_test(x, n=..., p=..., alternative=...): # -> Any | ndarray[Unknown, Unknown] | float:
    """Perform a test that the probabil"""
    ...

FlignerResult = ...
def fligner(*args, center=..., proportiontocut=...): # -> FlignerResult:
    """Perform Fligner-Killeen test for"""
    ...

def mood(x, y, axis=..., alternative=...): # -> tuple[Any, Any | ndarray[Unknown, Unknown] | NDArray[signedinteger[Any]]]:
    """Perform Mood's test for equal sc"""
    ...

WilcoxonResult = ...
def wilcoxon(x, y=..., zero_method=..., correction=..., alternative=..., mode=...):
    """Calculate the Wilcoxon signed-ra"""
    ...

def median_test(*args, ties=..., correction=..., lambda_=..., nan_policy=...): # -> tuple[float, float, float, None] | tuple[float | Unknown, float | Unknown, Unknown, ndarray[Unknown, Unknown]]:
    """Perform a Mood's median test.

 """
    ...

def circmean(samples, high=..., low=..., axis=..., nan_policy=...): # -> NDArray[floating[Any]] | Any:
    """Compute the circular mean for sa"""
    ...

def circvar(samples, high=..., low=..., axis=..., nan_policy=...): # -> Any:
    """Compute the circular variance fo"""
    ...

def circstd(samples, high=..., low=..., axis=..., nan_policy=...): # -> Any:
    """
    Compute the circular standa"""
    ...


"""
This type stub file was generated by pyright.
"""

"""
Hierarchical clustering (:mod:`"""
_LINKAGE_METHODS = ...
_EUCLIDEAN_METHODS = ...
__all__ = ['ClusterNode', 'DisjointSet', 'average', 'centroid', 'complete', 'cophenet', 'correspond', 'cut_tree', 'dendrogram', 'fcluster', 'fclusterdata', 'from_mlab_linkage', 'inconsistent', 'is_isomorphic', 'is_monotonic', 'is_valid_im', 'is_valid_linkage', 'leaders', 'leaves_list', 'linkage', 'maxRstat', 'maxdists', 'maxinconsts', 'median', 'num_obs_linkage', 'optimal_leaf_ordering', 'set_link_color_palette', 'single', 'to_mlab_linkage', 'to_tree', 'ward', 'weighted', 'distance']
class ClusterWarning(UserWarning):
    ...


def single(y):
    """
    Perform single/min/nearest """
    ...

def complete(y):
    """
    Perform complete/max/farthe"""
    ...

def average(y):
    """
    Perform average/UPGMA linka"""
    ...

def weighted(y):
    """
    Perform weighted/WPGMA link"""
    ...

def centroid(y):
    """
    Perform centroid/UPGMC link"""
    ...

def median(y):
    """
    Perform median/WPGMC linkag"""
    ...

def ward(y):
    """
    Perform Ward's linkage on a"""
    ...

def linkage(y, method=..., metric=..., optimal_ordering=...):
    """
    Perform hierarchical/agglom"""
    ...

class ClusterNode:
    """
    A tree node class for repre"""
    def __init__(self, id, left=..., right=..., dist=..., count=...) -> None:
        ...
    
    def __lt__(self, node) -> bool:
        ...
    
    def __gt__(self, node) -> bool:
        ...
    
    def __eq__(self, node) -> bool:
        ...
    
    def get_id(self):
        """
        The identifier of the t"""
        ...
    
    def get_count(self): # -> int:
        """
        The number of leaf node"""
        ...
    
    def get_left(self): # -> None:
        """
        Return a reference to t"""
        ...
    
    def get_right(self): # -> None:
        """
        Return a reference to t"""
        ...
    
    def is_leaf(self): # -> bool:
        """
        Return True if the targ"""
        ...
    
    def pre_order(self, func=...): # -> list[Unknown]:
        """
        Perform pre-order trave"""
        ...
    


_cnode_bare = ...
_cnode_type = ...
def cut_tree(Z, n_clusters=..., height=...):
    """
    Given a linkage matrix Z, r"""
    ...

def to_tree(Z, rd=...): # -> tuple[ClusterNode | None, list[None]] | ClusterNode | None:
    """
    Convert a linkage matrix in"""
    ...

def optimal_leaf_ordering(Z, y, metric=...):
    """
    Given a linkage matrix Z an"""
    ...

def cophenet(Z, Y=...): # -> ndarray[Unknown, Unknown] | tuple[Any, ndarray[Unknown, Unknown]]:
    """
    Calculate the cophenetic di"""
    ...

def inconsistent(Z, d=...): # -> ndarray[Unknown, Unknown]:
    r"""
    Calculate inconsistency sta"""
    ...

def from_mlab_linkage(Z): # -> ndarray[Unknown, Unknown]:
    """
    Convert a linkage matrix ge"""
    ...

def to_mlab_linkage(Z): # -> ndarray[Unknown, Unknown] | Any:
    """
    Convert a linkage matrix to"""
    ...

def is_monotonic(Z): # -> Any:
    """
    Return True if the linkage """
    ...

def is_valid_im(R, warning=..., throw=..., name=...):
    """Return True if the inconsistency"""
    ...

def is_valid_linkage(Z, warning=..., throw=..., name=...):
    """
    Check the validity of a lin"""
    ...

def num_obs_linkage(Z): # -> int:
    """
    Return the number of origin"""
    ...

def correspond(Z, Y): # -> bool:
    """
    Check for correspondence be"""
    ...

def fcluster(Z, t, criterion=..., depth=..., R=..., monocrit=...): # -> ndarray[Unknown, Unknown]:
    """
    Form flat clusters from the"""
    ...

def fclusterdata(X, t, criterion=..., metric=..., depth=..., method=..., R=...): # -> ndarray[Unknown, Unknown]:
    """
    Cluster observation data us"""
    ...

def leaves_list(Z): # -> ndarray[Unknown, Unknown]:
    """
    Return a list of leaf node """
    ...

_dtextsizes = ...
_drotation = ...
_dtextsortedkeys = ...
_drotationsortedkeys = ...
_link_line_colors_default = ...
_link_line_colors = ...
def set_link_color_palette(palette): # -> None:
    """
    Set list of matplotlib colo"""
    ...

def dendrogram(Z, p=..., truncate_mode=..., color_threshold=..., get_leaves=..., orientation=..., labels=..., count_sort=..., distance_sort=..., show_leaf_counts=..., no_plot=..., no_labels=..., leaf_font_size=..., leaf_rotation=..., leaf_label_func=..., show_contracted=..., link_color_func=..., ax=..., above_threshold_color=...):
    """
    Plot the hierarchical clust"""
    ...

def is_isomorphic(T1, T2): # -> bool:
    """
    Determine if two different """
    ...

def maxdists(Z): # -> ndarray[Unknown, Unknown]:
    """
    Return the maximum distance"""
    ...

def maxinconsts(Z, R): # -> ndarray[Unknown, Unknown]:
    """
    Return the maximum inconsis"""
    ...

def maxRstat(Z, R, i): # -> ndarray[Unknown, Unknown]:
    """
    Return the maximum statisti"""
    ...

def leaders(Z, T): # -> tuple[ndarray[Unknown, Unknown], ndarray[Unknown, Unknown]]:
    """
    Return the root nodes in a """
    ...


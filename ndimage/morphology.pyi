"""
This type stub file was generated by pyright.
"""

__all__ = ['iterate_structure', 'generate_binary_structure', 'binary_erosion', 'binary_dilation', 'binary_opening', 'binary_closing', 'binary_hit_or_miss', 'binary_propagation', 'binary_fill_holes', 'grey_erosion', 'grey_dilation', 'grey_opening', 'grey_closing', 'morphological_gradient', 'morphological_laplace', 'white_tophat', 'black_tophat', 'distance_transform_bf', 'distance_transform_cdt', 'distance_transform_edt']
def iterate_structure(structure, iterations, origin=...): # -> ndarray[Unknown, Unknown] | tuple[Unknown, list[Unknown]]:
    """
    Iterate a structure by dila"""
    ...

def generate_binary_structure(rank, connectivity): # -> ndarray[Unknown, Unknown] | Any:
    """
    Generate a binary structure"""
    ...

def binary_erosion(input, structure=..., iterations=..., mask=..., output=..., border_value=..., origin=..., brute_force=...):
    """
    Multidimensional binary ero"""
    ...

def binary_dilation(input, structure=..., iterations=..., mask=..., output=..., border_value=..., origin=..., brute_force=...):
    """
    Multidimensional binary dil"""
    ...

def binary_opening(input, structure=..., iterations=..., output=..., origin=..., mask=..., border_value=..., brute_force=...):
    """
    Multidimensional binary ope"""
    ...

def binary_closing(input, structure=..., iterations=..., output=..., origin=..., mask=..., border_value=..., brute_force=...):
    """
    Multidimensional binary clo"""
    ...

def binary_hit_or_miss(input, structure1=..., structure2=..., output=..., origin1=..., origin2=...): # -> Any | None:
    """
    Multidimensional binary hit"""
    ...

def binary_propagation(input, structure=..., mask=..., output=..., border_value=..., origin=...):
    """
    Multidimensional binary pro"""
    ...

def binary_fill_holes(input, structure=..., output=..., origin=...): # -> None:
    """
    Fill the holes in binary ob"""
    ...

def grey_erosion(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...):
    """
    Calculate a greyscale erosi"""
    ...

def grey_dilation(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...):
    """
    Calculate a greyscale dilat"""
    ...

def grey_opening(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...):
    """
    Multidimensional grayscale """
    ...

def grey_closing(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...):
    """
    Multidimensional grayscale """
    ...

def morphological_gradient(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...): # -> NDArray[Any]:
    """
    Multidimensional morphologi"""
    ...

def morphological_laplace(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...): # -> NDArray[Any]:
    """
    Multidimensional morphologi"""
    ...

def white_tophat(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...): # -> None:
    """
    Multidimensional white toph"""
    ...

def black_tophat(input, size=..., footprint=..., structure=..., output=..., mode=..., cval=..., origin=...): # -> None:
    """
    Multidimensional black toph"""
    ...

def distance_transform_bf(input, metric=..., sampling=..., return_distances=..., return_indices=..., distances=..., indices=...):
    """
    Distance transform function"""
    ...

def distance_transform_cdt(input, metric=..., return_distances=..., return_indices=..., distances=..., indices=...):
    """
    Distance transform for cham"""
    ...

def distance_transform_edt(input, sampling=..., return_distances=..., return_indices=..., distances=..., indices=...):
    """
    Exact Euclidean distance tr"""
    ...


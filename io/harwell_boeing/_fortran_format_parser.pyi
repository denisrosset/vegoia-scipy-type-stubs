"""
This type stub file was generated by pyright.
"""

"""
Preliminary module to handle Fo"""
__all__ = ["BadFortranFormat", "FortranFormatParser", "IntFormat", "ExpFormat"]
TOKENS = ...
class BadFortranFormat(SyntaxError):
    ...


def number_digits(n): # -> int:
    ...

class IntFormat:
    @classmethod
    def from_number(cls, n, min=...): # -> Self@IntFormat:
        """Given an integer, returns a "rea"""
        ...
    
    def __init__(self, width, min=..., repeat=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def fortran_format(self): # -> str:
        ...
    
    @property
    def python_format(self): # -> str:
        ...
    


class ExpFormat:
    @classmethod
    def from_number(cls, n, min=...): # -> Self@ExpFormat:
        """Given a float number, returns a """
        ...
    
    def __init__(self, width, significand, min=..., repeat=...) -> None:
        """\
        Parameters
        ---"""
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def fortran_format(self): # -> str:
        ...
    
    @property
    def python_format(self): # -> str:
        ...
    


class Token:
    def __init__(self, type, value, pos) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Tokenizer:
    def __init__(self) -> None:
        ...
    
    def input(self, s): # -> None:
        ...
    
    def next_token(self): # -> Token | None:
        ...
    


class FortranFormatParser:
    """Parser for Fortran format string"""
    def __init__(self) -> None:
        ...
    
    def parse(self, s): # -> IntFormat | ExpFormat:
        ...
    



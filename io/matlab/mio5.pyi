"""
This type stub file was generated by pyright.
"""

from .miobase import MatFileReader, docfiller

''' Classes for read / write of mat'''
class MatFile5Reader(MatFileReader):
    ''' Reader for Mat 5 mat files
    '''
    @docfiller
    def __init__(self, mat_stream, byte_order=..., mat_dtype=..., squeeze_me=..., chars_as_strings=..., matlab_compatible=..., struct_as_record=..., verify_compressed_data_integrity=..., uint16_codec=..., simplify_cells=...) -> None:
        '''Initializer for matlab 5 file fo'''
        ...
    
    def guess_byte_order(self): # -> Literal['>', '<']:
        ''' Guess byte order.
        Sets '''
        ...
    
    def read_file_header(self): # -> dict[Unknown, Unknown]:
        ''' Read in mat 5 file header '''
        ...
    
    def initialize_read(self): # -> None:
        ''' Run when beginning read of vari'''
        ...
    
    def read_var_header(self): # -> tuple[Unknown, Unknown]:
        ''' Read header, return header, nex'''
        ...
    
    def read_var_array(self, header, process=...):
        ''' Read array, given `header`

   '''
        ...
    
    def get_variables(self, variable_names=...):
        ''' get variables from stream as di'''
        ...
    
    def list_variables(self): # -> list[Unknown]:
        ''' list variables from stream '''
        ...
    


def varmats_from_mat(file_obj): # -> list[Unknown]:
    """ Pull variables out of mat 5 fil"""
    ...

class EmptyStructMarker:
    """ Class to indicate presence of e"""
    ...


def to_writeable(source): # -> ndarray[Unknown, Unknown] | Type[EmptyStructMarker] | generic | dict[Unknown, Unknown] | None:
    ''' Convert input object ``source``'''
    ...

NDT_FILE_HDR = ...
NDT_TAG_FULL = ...
NDT_TAG_SMALL = ...
NDT_ARRAY_FLAGS = ...
class VarWriter5:
    ''' Generic matlab matrix writing c'''
    mat_tag = ...
    def __init__(self, file_writer) -> None:
        ...
    
    def write_bytes(self, arr): # -> None:
        ...
    
    def write_string(self, s): # -> None:
        ...
    
    def write_element(self, arr, mdtype=...): # -> None:
        ''' write tag and data '''
        ...
    
    def write_smalldata_element(self, arr, mdtype, byte_count): # -> None:
        ...
    
    def write_regular_element(self, arr, mdtype, byte_count): # -> None:
        ...
    
    def write_header(self, shape, mclass, is_complex=..., is_logical=..., nzmax=...): # -> None:
        ''' Write header for given data opt'''
        ...
    
    def update_matrix_tag(self, start_pos): # -> None:
        ...
    
    def write_top(self, arr, name, is_global): # -> None:
        """ Write variable at top level of """
        ...
    
    def write(self, arr): # -> None:
        ''' Write `arr` to stream at top an'''
        ...
    
    def write_numeric(self, arr): # -> None:
        ...
    
    def write_char(self, arr, codec=...): # -> None:
        ''' Write string array `arr` with g'''
        ...
    
    def write_sparse(self, arr): # -> None:
        ''' Sparse matrices are 2D
        '''
        ...
    
    def write_cells(self, arr): # -> None:
        ...
    
    def write_empty_struct(self): # -> None:
        ...
    
    def write_struct(self, arr): # -> None:
        ...
    
    def write_object(self, arr): # -> None:
        '''Same as writing structs, except '''
        ...
    


class MatFile5Writer:
    ''' Class for writing mat5 files '''
    @docfiller
    def __init__(self, file_stream, do_compression=..., unicode_strings=..., global_vars=..., long_field_names=..., oned_as=...) -> None:
        ''' Initialize writer for matlab 5 '''
        ...
    
    def write_file_header(self): # -> None:
        ...
    
    def put_variables(self, mdict, write_header=...): # -> None:
        ''' Write variables in `mdict` to s'''
        ...
    



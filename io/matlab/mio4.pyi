"""
This type stub file was generated by pyright.
"""

from .miobase import MatFileReader, docfiller

''' Classes for read / write of mat'''
SYS_LITTLE_ENDIAN = ...
miDOUBLE = ...
miSINGLE = ...
miINT32 = ...
miINT16 = ...
miUINT16 = ...
miUINT8 = ...
mdtypes_template = ...
np_to_mtypes = ...
mxFULL_CLASS = ...
mxCHAR_CLASS = ...
mxSPARSE_CLASS = ...
order_codes = ...
mclass_info = ...
class VarHeader4:
    is_logical = ...
    is_global = ...
    def __init__(self, name, dtype, mclass, dims, is_complex) -> None:
        ...
    


class VarReader4:
    ''' Class to read matlab 4 variable'''
    def __init__(self, file_reader) -> None:
        ...
    
    def read_header(self): # -> VarHeader4:
        ''' Read and return header for vari'''
        ...
    
    def array_from_header(self, hdr, process=...): # -> coo_matrix | NDArray[complexfloating[Any, Any]] | ndarray[_ShapeType@ndarray, _DType_co@ndarray]:
        ...
    
    def read_sub_array(self, hdr, copy=...): # -> ndarray[_ShapeType@ndarray, _DType_co@ndarray]:
        ''' Mat4 read using header `hdr` dt'''
        ...
    
    def read_full_array(self, hdr): # -> NDArray[complexfloating[Any, Any]] | ndarray[_ShapeType@ndarray, _DType_co@ndarray]:
        ''' Full (rather than sparse) matri'''
        ...
    
    def read_char_array(self, hdr): # -> ndarray[_ShapeType@ndarray, _DType_co@ndarray]:
        ''' latin-1 text matrix (char matri'''
        ...
    
    def read_sparse_array(self, hdr): # -> coo_matrix:
        ''' Read and return sparse matrix t'''
        ...
    
    def shape_from_header(self, hdr): # -> tuple[()] | tuple[int, ...] | tuple[int, int]:
        '''Read the shape of the array desc'''
        ...
    


class MatFile4Reader(MatFileReader):
    ''' Reader for Mat4 files '''
    @docfiller
    def __init__(self, mat_stream, *args, **kwargs) -> None:
        ''' Initialize matlab 4 file reader'''
        ...
    
    def guess_byte_order(self): # -> Literal['<', '>']:
        ...
    
    def initialize_read(self): # -> None:
        ''' Run when beginning read of vari'''
        ...
    
    def read_var_header(self): # -> tuple[VarHeader4, Unknown]:
        ''' Read and return header, next po'''
        ...
    
    def read_var_array(self, header, process=...): # -> coo_matrix | NDArray[complexfloating[Any, Any]] | ndarray[_ShapeType@ndarray, _DType_co@ndarray]:
        ''' Read array, given `header`

   '''
        ...
    
    def get_variables(self, variable_names=...): # -> dict[Unknown, Unknown]:
        ''' get variables from stream as di'''
        ...
    
    def list_variables(self): # -> list[Unknown]:
        ''' list variables from stream '''
        ...
    


def arr_to_2d(arr, oned_as=...):
    ''' Make ``arr`` exactly two dimens'''
    ...

class VarWriter4:
    def __init__(self, file_writer) -> None:
        ...
    
    def write_bytes(self, arr): # -> None:
        ...
    
    def write_string(self, s): # -> None:
        ...
    
    def write_header(self, name, shape, P=..., T=..., imagf=...): # -> None:
        ''' Write header for given data opt'''
        ...
    
    def write(self, arr, name): # -> None:
        ''' Write matrix `arr`, with name `'''
        ...
    
    def write_numeric(self, arr, name): # -> None:
        ...
    
    def write_char(self, arr, name): # -> None:
        ...
    
    def write_sparse(self, arr, name): # -> None:
        ''' Sparse matrices are 2-D

      '''
        ...
    


class MatFile4Writer:
    ''' Class for writing matlab 4 form'''
    def __init__(self, file_stream, oned_as=...) -> None:
        ...
    
    def put_variables(self, mdict, write_header=...): # -> None:
        ''' Write variables in `mdict` to s'''
        ...
    



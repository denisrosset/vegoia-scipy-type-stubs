"""
This type stub file was generated by pyright.
"""

import typing

ArgumentExtractorType = typing.Callable[..., typing.Tuple["Dispatchable", ...]]
ArgumentReplacerType = typing.Callable[[typing.Tuple, typing.Dict, typing.Tuple], typing.Tuple[typing.Tuple, typing.Dict]]
__all__ = ["set_backend", "set_global_backend", "skip_backend", "register_backend", "clear_backends", "create_multimethod", "generate_multimethod", "_Function", "BackendNotImplementedError", "Dispatchable", "wrap_single_convertor", "all_of_type", "mark_as"]
def unpickle_function(mod_name, qname): # -> Any:
    ...

def pickle_function(func): # -> tuple[(mod_name: Unknown, qname: Unknown) -> Any, tuple[Any | None, Any | None]]:
    ...

def create_multimethod(*args, **kwargs): # -> (a: Unknown) -> Unknown:
    """
    Creates a decorator for gen"""
    ...

def generate_multimethod(argument_extractor: ArgumentExtractorType, argument_replacer: ArgumentReplacerType, domain: str, default: typing.Optional[typing.Callable] = ...):
    """
    Generates a multimethod.

 """
    ...

def set_backend(backend, coerce=..., only=...):
    """
    A context manager that sets"""
    ...

def skip_backend(backend):
    """
    A context manager that allo"""
    ...

def get_defaults(f): # -> tuple[dict[Unknown, Unknown], tuple[Unknown, ...], set[Unknown]]:
    ...

def set_global_backend(backend, coerce=..., only=...): # -> None:
    """
    This utility method replace"""
    ...

def register_backend(backend): # -> None:
    """
    This utility method sets re"""
    ...

def clear_backends(domain, registered=..., globals=...): # -> None:
    """
    This utility method clears """
    ...

class Dispatchable:
    """
    A utility class which marks"""
    def __init__(self, value, dispatch_type, coercible=...) -> None:
        ...
    
    def __getitem__(self, index): # -> Unknown:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...


def mark_as(dispatch_type): # -> partial[Dispatchable]:
    """
    Creates a utility function """
    ...

def all_of_type(arg_type): # -> (func: Unknown) -> ((*args: Unknown, **kwargs: Unknown) -> tuple[Dispatchable, ...]):
    """
    Marks all unmarked argument"""
    ...

def wrap_single_convertor(convert_single): # -> (dispatchables: Unknown, coerce: Unknown) -> (_NotImplementedType | list[Unknown]):
    """
    Wraps a ``__ua_convert__`` """
    ...


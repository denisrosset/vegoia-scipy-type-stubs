"""
This type stub file was generated by pyright.
"""

__all__ = ['ai_zeros', 'assoc_laguerre', 'bei_zeros', 'beip_zeros', 'ber_zeros', 'bernoulli', 'berp_zeros', 'bi_zeros', 'clpmn', 'comb', 'digamma', 'diric', 'erf_zeros', 'euler', 'factorial', 'factorial2', 'factorialk', 'fresnel_zeros', 'fresnelc_zeros', 'fresnels_zeros', 'gamma', 'h1vp', 'h2vp', 'hankel1', 'hankel2', 'hyp0f1', 'iv', 'ivp', 'jn_zeros', 'jnjnp_zeros', 'jnp_zeros', 'jnyn_zeros', 'jv', 'jvp', 'kei_zeros', 'keip_zeros', 'kelvin_zeros', 'ker_zeros', 'kerp_zeros', 'kv', 'kvp', 'lmbda', 'lpmn', 'lpn', 'lqmn', 'lqn', 'mathieu_a', 'mathieu_b', 'mathieu_even_coef', 'mathieu_odd_coef', 'ndtri', 'obl_cv_seq', 'pbdn_seq', 'pbdv_seq', 'pbvv_seq', 'perm', 'polygamma', 'pro_cv_seq', 'psi', 'riccati_jn', 'riccati_yn', 'sinc', 'y0_zeros', 'y1_zeros', 'y1p_zeros', 'yn_zeros', 'ynp_zeros', 'yv', 'yvp', 'zeta']
def diric(x, n): # -> ndarray[Unknown, Unknown]:
    """Periodic sinc function, also cal"""
    ...

def jnjnp_zeros(nt): # -> tuple[Any, Any, Any, Any]:
    """Compute zeros of integer-order B"""
    ...

def jnyn_zeros(n, nt): # -> Any:
    """Compute nt zeros of Bessel funct"""
    ...

def jn_zeros(n, nt): # -> Any:
    r"""Compute zeros of integer-order B"""
    ...

def jnp_zeros(n, nt): # -> Any:
    r"""Compute zeros of integer-order B"""
    ...

def yn_zeros(n, nt): # -> Any:
    r"""Compute zeros of integer-order B"""
    ...

def ynp_zeros(n, nt): # -> Any:
    r"""Compute zeros of integer-order B"""
    ...

def y0_zeros(nt, complex=...): # -> Any:
    """Compute nt zeros of Bessel funct"""
    ...

def y1_zeros(nt, complex=...): # -> Any:
    """Compute nt zeros of Bessel funct"""
    ...

def y1p_zeros(nt, complex=...): # -> Any:
    """Compute nt zeros of Bessel deriv"""
    ...

def jvp(v, z, n=...): # -> Any:
    """Compute derivatives of Bessel fu"""
    ...

def yvp(v, z, n=...): # -> Any:
    """Compute derivatives of Bessel fu"""
    ...

def kvp(v, z, n=...): # -> Any:
    """Compute nth derivative of real-o"""
    ...

def ivp(v, z, n=...): # -> Any:
    """Compute derivatives of modified """
    ...

def h1vp(v, z, n=...): # -> Any:
    """Compute nth derivative of Hankel"""
    ...

def h2vp(v, z, n=...): # -> Any:
    """Compute nth derivative of Hankel"""
    ...

def riccati_jn(n, x): # -> tuple[Any, Any]:
    r"""Compute Ricatti-Bessel function """
    ...

def riccati_yn(n, x): # -> tuple[Any, Any]:
    """Compute Ricatti-Bessel function """
    ...

def erf_zeros(nt): # -> Any:
    """Compute the first nt zero in the"""
    ...

def fresnelc_zeros(nt): # -> Any:
    """Compute nt complex zeros of cosi"""
    ...

def fresnels_zeros(nt): # -> Any:
    """Compute nt complex zeros of sine"""
    ...

def fresnel_zeros(nt): # -> tuple[Any, Any]:
    """Compute nt complex zeros of sine"""
    ...

def assoc_laguerre(x, n, k=...):
    """Compute the generalized (associa"""
    ...

digamma = ...
def polygamma(n, x):
    r"""Polygamma functions.

    Define"""
    ...

def mathieu_even_coef(m, q): # -> Any:
    r"""Fourier coefficients for even Ma"""
    ...

def mathieu_odd_coef(m, q): # -> Any:
    r"""Fourier coefficients for even Ma"""
    ...

def lpmn(m, n, z): # -> tuple[Unknown | Any, Unknown | Any]:
    """Sequence of associated Legendre """
    ...

def clpmn(m, n, z, type=...): # -> tuple[Unknown | Any, Unknown | Any]:
    """Associated Legendre function of """
    ...

def lqmn(m, n, z): # -> tuple[Any, Any]:
    """Sequence of associated Legendre """
    ...

def bernoulli(n): # -> Any:
    """Bernoulli numbers B0..Bn (inclus"""
    ...

def euler(n): # -> Any:
    """Euler numbers E(0), E(1), ..., E"""
    ...

def lpn(n, z): # -> tuple[Any, Any]:
    """Legendre function of the first k"""
    ...

def lqn(n, z): # -> tuple[Any, Any]:
    """Legendre function of the second """
    ...

def ai_zeros(nt): # -> Any:
    """
    Compute `nt` zeros and valu"""
    ...

def bi_zeros(nt): # -> Any:
    """
    Compute `nt` zeros and valu"""
    ...

def lmbda(v, x): # -> tuple[Any, Any]:
    r"""Jahnke-Emden Lambda function, La"""
    ...

def pbdv_seq(v, x): # -> tuple[Any, Any]:
    """Parabolic cylinder functions Dv("""
    ...

def pbvv_seq(v, x): # -> tuple[Any, Any]:
    """Parabolic cylinder functions Vv("""
    ...

def pbdn_seq(n, z): # -> tuple[Any, Any]:
    """Parabolic cylinder functions Dn("""
    ...

def ber_zeros(nt): # -> Any:
    """Compute nt zeros of the Kelvin f"""
    ...

def bei_zeros(nt): # -> Any:
    """Compute nt zeros of the Kelvin f"""
    ...

def ker_zeros(nt): # -> Any:
    """Compute nt zeros of the Kelvin f"""
    ...

def kei_zeros(nt): # -> Any:
    """Compute nt zeros of the Kelvin f"""
    ...

def berp_zeros(nt): # -> Any:
    """Compute nt zeros of the derivati"""
    ...

def beip_zeros(nt): # -> Any:
    """Compute nt zeros of the derivati"""
    ...

def kerp_zeros(nt): # -> Any:
    """Compute nt zeros of the derivati"""
    ...

def keip_zeros(nt): # -> Any:
    """Compute nt zeros of the derivati"""
    ...

def kelvin_zeros(nt): # -> tuple[Any, Any, Any, Any, Any, Any, Any, Any]:
    """Compute nt zeros of all Kelvin f"""
    ...

def pro_cv_seq(m, n, c): # -> Any:
    """Characteristic values for prolat"""
    ...

def obl_cv_seq(m, n, c): # -> Any:
    """Characteristic values for oblate"""
    ...

def comb(N, k, exact=..., repetition=...): # -> ndarray[Unknown, Unknown] | float64 | Any:
    """The number of combinations of N """
    ...

def perm(N, k, exact=...): # -> int | ndarray[Unknown, Unknown] | float64 | Any:
    """Permutations of N things taken k"""
    ...

def factorial(n, exact=...):
    """
    The factorial of a number o"""
    ...

def factorial2(n, exact=...): # -> int | ndarray[Unknown, Unknown]:
    """Double factorial.

    This is t"""
    ...

def factorialk(n, k, exact=...): # -> int:
    """Multifactorial of n of order k, """
    ...

def zeta(x, q=..., out=...): # -> Any:
    r"""
    Riemann or Hurwitz zeta fun"""
    ...


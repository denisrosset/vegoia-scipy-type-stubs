"""
This type stub file was generated by pyright.
"""

"""Functions to construct sparse ma"""
__docformat__ = ...
__all__ = ['spdiags', 'eye', 'identity', 'kron', 'kronsum', 'hstack', 'vstack', 'bmat', 'rand', 'random', 'diags', 'block_diag']
def spdiags(data, diags, m, n, format=...): # -> dia_matrix | Any:
    """
    Return a sparse matrix from"""
    ...

def diags(diagonals, offsets=..., shape=..., format=..., dtype=...): # -> dia_matrix | Any:
    """
    Construct a sparse matrix f"""
    ...

def identity(n, dtype=..., format=...): # -> csr_matrix | csc_matrix | coo_matrix | dia_matrix | Any:
    """Identity matrix in sparse format"""
    ...

def eye(m, n=..., k=..., dtype=..., format=...): # -> csr_matrix | csc_matrix | coo_matrix | dia_matrix | Any:
    """Sparse matrix with ones on diago"""
    ...

def kron(A, B, format=...):
    """kronecker product of sparse matr"""
    ...

def kronsum(A, B, format=...):
    """kronecker sum of sparse matrices"""
    ...

def hstack(blocks, format=..., dtype=...):
    """
    Stack sparse matrices horiz"""
    ...

def vstack(blocks, format=..., dtype=...):
    """
    Stack sparse matrices verti"""
    ...

def bmat(blocks, format=..., dtype=...):
    """
    Build a sparse matrix from """
    ...

def block_diag(mats, format=..., dtype=...): # -> coo_matrix | Any:
    """
    Build a block diagonal spar"""
    ...

def random(m, n, density=..., format=..., dtype=..., random_state=..., data_rvs=...): # -> coo_matrix | Any:
    """Generate a sparse matrix of the """
    ...

def rand(m, n, density=..., format=..., dtype=..., random_state=...): # -> coo_matrix | Any:
    """Generate a sparse matrix of the """
    ...


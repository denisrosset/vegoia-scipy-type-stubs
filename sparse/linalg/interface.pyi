"""
This type stub file was generated by pyright.
"""

"""Abstract linear algebra library."""
__all__ = ['LinearOperator', 'aslinearoperator']
class LinearOperator:
    """Common interface for performing """
    ndim = ...
    def __new__(cls, *args, **kwargs): # -> _CustomLinearOperator | Self@LinearOperator:
        ...
    
    def __init__(self, dtype, shape) -> None:
        """Initialize this LinearOperator.
"""
        ...
    
    def matvec(self, x): # -> ndarray[Any, Unknown]:
        """Matrix-vector multiplication.

 """
        ...
    
    def rmatvec(self, x): # -> ndarray[Any, Unknown]:
        """Adjoint matrix-vector multiplica"""
        ...
    
    def matmat(self, X): # -> matrix[Unknown, Unknown] | ndarray[Unknown, Unknown]:
        """Matrix-matrix multiplication.

 """
        ...
    
    def rmatmat(self, X): # -> matrix[Unknown, Unknown] | Any | ndarray[Unknown, Unknown]:
        """Adjoint matrix-matrix multiplica"""
        ...
    
    def __call__(self, x):
        ...
    
    def __mul__(self, x): # -> _ProductLinearOperator | _ScaledLinearOperator | ndarray[Any, Unknown] | matrix[Unknown, Unknown] | ndarray[Unknown, Unknown]:
        ...
    
    def dot(self, x): # -> _ProductLinearOperator | _ScaledLinearOperator | ndarray[Any, Unknown] | matrix[Unknown, Unknown] | ndarray[Unknown, Unknown]:
        """Matrix-matrix or matrix-vector m"""
        ...
    
    def __matmul__(self, other): # -> _ProductLinearOperator | _ScaledLinearOperator | ndarray[Any, Unknown] | matrix[Unknown, Unknown] | ndarray[Unknown, Unknown]:
        ...
    
    def __rmatmul__(self, other): # -> _ScaledLinearOperator | _NotImplementedType:
        ...
    
    def __rmul__(self, x): # -> _ScaledLinearOperator | _NotImplementedType:
        ...
    
    def __pow__(self, p): # -> _PowerLinearOperator | _NotImplementedType:
        ...
    
    def __add__(self, x): # -> _SumLinearOperator | _NotImplementedType:
        ...
    
    def __neg__(self): # -> _ScaledLinearOperator:
        ...
    
    def __sub__(self, x): # -> _SumLinearOperator | _NotImplementedType:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def adjoint(self): # -> _AdjointLinearOperator:
        """Hermitian adjoint.

        Retu"""
        ...
    
    H = ...
    def transpose(self): # -> _TransposedLinearOperator:
        """Transpose this linear operator.
"""
        ...
    
    T = ...


class _CustomLinearOperator(LinearOperator):
    """Linear operator defined in terms"""
    def __init__(self, shape, matvec, rmatvec=..., matmat=..., dtype=..., rmatmat=...) -> None:
        ...
    


class _AdjointLinearOperator(LinearOperator):
    """Adjoint of arbitrary Linear Oper"""
    def __init__(self, A) -> None:
        ...
    


class _TransposedLinearOperator(LinearOperator):
    """Transposition of arbitrary Linea"""
    def __init__(self, A) -> None:
        ...
    


class _SumLinearOperator(LinearOperator):
    def __init__(self, A, B) -> None:
        ...
    


class _ProductLinearOperator(LinearOperator):
    def __init__(self, A, B) -> None:
        ...
    


class _ScaledLinearOperator(LinearOperator):
    def __init__(self, A, alpha) -> None:
        ...
    


class _PowerLinearOperator(LinearOperator):
    def __init__(self, A, p) -> None:
        ...
    


class MatrixLinearOperator(LinearOperator):
    def __init__(self, A) -> None:
        ...
    


class _AdjointMatrixOperator(MatrixLinearOperator):
    def __init__(self, adjoint) -> None:
        ...
    
    @property
    def dtype(self):
        ...
    


class IdentityOperator(LinearOperator):
    def __init__(self, shape, dtype=...) -> None:
        ...
    


def aslinearoperator(A): # -> LinearOperator | MatrixLinearOperator:
    """Return A as a LinearOperator.

 """
    ...


"""
This type stub file was generated by pyright.
"""

"""Base class for sparse matrices"""
__all__ = ['spmatrix', 'isspmatrix', 'issparse', 'SparseWarning', 'SparseEfficiencyWarning']
class SparseWarning(Warning):
    ...


class SparseFormatWarning(SparseWarning):
    ...


class SparseEfficiencyWarning(SparseWarning):
    ...


_formats = ...
_ufuncs_with_fixed_point_at_zero = ...
MAXPRINT = ...
class spmatrix:
    """ This class provides a base clas"""
    __array_priority__ = ...
    ndim = ...
    def __init__(self, maxprint=...) -> None:
        ...
    
    def set_shape(self, shape): # -> None:
        """See `reshape`."""
        ...
    
    def get_shape(self): # -> None:
        """Get shape of a matrix."""
        ...
    
    shape = ...
    def reshape(self, *args, **kwargs): # -> Self@spmatrix:
        """reshape(self, shape, order='C', """
        ...
    
    def resize(self, shape):
        """Resize the matrix in-place to di"""
        ...
    
    def astype(self, dtype, casting=..., copy=...): # -> Self@spmatrix:
        """Cast the matrix elements to a sp"""
        ...
    
    def asfptype(self): # -> Self@spmatrix:
        """Upcast matrix to a floating poin"""
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def getmaxprint(self): # -> Unknown:
        """Maximum number of elements to di"""
        ...
    
    def count_nonzero(self):
        """Number of non-zero entries, equi"""
        ...
    
    def getnnz(self, axis=...):
        """Number of stored values, includi"""
        ...
    
    @property
    def nnz(self):
        """Number of stored values, includi"""
        ...
    
    def getformat(self): # -> Any | str:
        """Format of a matrix representatio"""
        ...
    
    def __repr__(self): # -> Any:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __bool__(self):
        ...
    
    __nonzero__ = ...
    def __len__(self):
        ...
    
    def asformat(self, format, copy=...): # -> Self@spmatrix | Any:
        """Return this matrix in the passed"""
        ...
    
    def multiply(self, other):
        """Point-wise multiplication by ano"""
        ...
    
    def maximum(self, other):
        """Element-wise maximum between thi"""
        ...
    
    def minimum(self, other):
        """Element-wise minimum between thi"""
        ...
    
    def dot(self, other):
        """Ordinary dot product

        Ex"""
        ...
    
    def power(self, n, dtype=...):
        """Element-wise power."""
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __gt__(self, other) -> bool:
        ...
    
    def __le__(self, other) -> bool:
        ...
    
    def __ge__(self, other) -> bool:
        ...
    
    def __abs__(self):
        ...
    
    def __round__(self, ndigits=...):
        ...
    
    def __add__(self, other): # -> Self@spmatrix | _NotImplementedType:
        ...
    
    def __radd__(self, other): # -> Self@spmatrix | _NotImplementedType:
        ...
    
    def __sub__(self, other): # -> Self@spmatrix | _NotImplementedType:
        ...
    
    def __rsub__(self, other): # -> _NotImplementedType:
        ...
    
    def __mul__(self, other):
        """interpret other and call one of """
        ...
    
    def __rmul__(self, other):
        ...
    
    def __matmul__(self, other):
        ...
    
    def __rmatmul__(self, other):
        ...
    
    def __truediv__(self, other):
        ...
    
    def __div__(self, other):
        ...
    
    def __rtruediv__(self, other): # -> _NotImplementedType:
        ...
    
    def __rdiv__(self, other): # -> _NotImplementedType:
        ...
    
    def __neg__(self):
        ...
    
    def __iadd__(self, other): # -> _NotImplementedType:
        ...
    
    def __isub__(self, other): # -> _NotImplementedType:
        ...
    
    def __imul__(self, other): # -> _NotImplementedType:
        ...
    
    def __idiv__(self, other): # -> _NotImplementedType:
        ...
    
    def __itruediv__(self, other): # -> _NotImplementedType:
        ...
    
    def __pow__(self, other): # -> csr_matrix | csc_matrix | coo_matrix | dia_matrix | Any | Self@spmatrix | _NotImplementedType:
        ...
    
    def __getattr__(self, attr):
        ...
    
    def transpose(self, axes=..., copy=...):
        """
        Reverses the dimensions"""
        ...
    
    def conj(self, copy=...): # -> Self@spmatrix:
        """Element-wise complex conjugation"""
        ...
    
    def conjugate(self, copy=...): # -> Self@spmatrix:
        ...
    
    def getH(self):
        """Return the Hermitian transpose o"""
        ...
    
    def nonzero(self): # -> tuple[Unknown, Unknown]:
        """nonzero indices

        Returns"""
        ...
    
    def getcol(self, j):
        """Returns a copy of column j of th"""
        ...
    
    def getrow(self, i):
        """Returns a copy of row i of the m"""
        ...
    
    def todense(self, order=..., out=...): # -> matrix[Unknown, Unknown]:
        """
        Return a dense matrix r"""
        ...
    
    def toarray(self, order=..., out=...):
        """
        Return a dense ndarray """
        ...
    
    def tocsr(self, copy=...):
        """Convert this matrix to Compresse"""
        ...
    
    def todok(self, copy=...):
        """Convert this matrix to Dictionar"""
        ...
    
    def tocoo(self, copy=...):
        """Convert this matrix to COOrdinat"""
        ...
    
    def tolil(self, copy=...):
        """Convert this matrix to List of L"""
        ...
    
    def todia(self, copy=...):
        """Convert this matrix to sparse DI"""
        ...
    
    def tobsr(self, blocksize=..., copy=...):
        """Convert this matrix to Block Spa"""
        ...
    
    def tocsc(self, copy=...):
        """Convert this matrix to Compresse"""
        ...
    
    def copy(self): # -> Self@spmatrix:
        """Returns a copy of this matrix.

"""
        ...
    
    def sum(self, axis=..., dtype=..., out=...):
        """
        Sum the matrix elements"""
        ...
    
    def mean(self, axis=..., dtype=..., out=...): # -> Any:
        """
        Compute the arithmetic """
        ...
    
    def diagonal(self, k=...):
        """Returns the kth diagonal of the """
        ...
    
    def setdiag(self, values, k=...): # -> None:
        """
        Set diagonal or off-dia"""
        ...
    


def isspmatrix(x): # -> bool:
    """Is x of a sparse matrix type?

 """
    ...

issparse = ...

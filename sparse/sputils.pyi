"""
This type stub file was generated by pyright.
"""

""" Utility functions for sparse ma"""
__all__ = ['upcast', 'getdtype', 'getdata', 'isscalarlike', 'isintlike', 'isshape', 'issequence', 'isdense', 'ismatrix', 'get_sum_dtype']
supported_dtypes = ...
_upcast_memo = ...
def upcast(*args): # -> Type[bool_] | byte | ubyte | single | csingle:
    """Returns the nearest supported sp"""
    ...

def upcast_char(*args): # -> Type[bool_] | byte | ubyte | single | csingle:
    """Same as `upcast` but taking dtyp"""
    ...

def upcast_scalar(dtype, scalar):
    """Determine data type for binary o"""
    ...

def downcast_intp_index(arr):
    """
    Down-cast index array to np"""
    ...

def to_native(A): # -> ndarray[Unknown, Unknown]:
    ...

def getdtype(dtype, a=..., default=...): # -> dtype[Unknown]:
    """Function used to simplify argume"""
    ...

def getdata(obj, dtype=..., copy=...): # -> ndarray[Unknown, Unknown]:
    """
    This is a wrapper of `np.ar"""
    ...

def get_index_dtype(arrays=..., maxval=..., check_contents=...): # -> int64 | intc:
    """
    Based on input (integer) ar"""
    ...

def get_sum_dtype(dtype): # -> uint | int_:
    """Mimic numpy's casting for np.sum"""
    ...

def isscalarlike(x): # -> bool:
    """Is x either a scalar, an array s"""
    ...

def isintlike(x): # -> bool:
    """Is x appropriate as an index int"""
    ...

def isshape(x, nonneg=...): # -> bool:
    """Is x a valid 2-tuple of dimensio"""
    ...

def issequence(t): # -> bool:
    ...

def ismatrix(t): # -> bool:
    ...

def isdense(x): # -> bool:
    ...

def validateaxis(axis): # -> None:
    ...

def check_shape(args, current_shape=...): # -> tuple[int, ...]:
    """Imitate numpy.matrix handling of"""
    ...

def check_reshape_kwargs(kwargs): # -> tuple[Unknown, Unknown]:
    """Unpack keyword arguments for res"""
    ...

def is_pydata_spmatrix(m): # -> bool:
    """
    Check whether object is pyd"""
    ...

def matrix(*args, **kwargs): # -> matrix[Unknown, Unknown]:
    ...

def asmatrix(data, dtype=...): # -> matrix[Unknown, Unknown]:
    ...

